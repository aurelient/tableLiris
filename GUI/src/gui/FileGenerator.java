/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author edouard
 */
public class FileGenerator extends javax.swing.JFrame {
    private DefaultListModel listModel = new DefaultListModel();
    private DefaultListModel canvasListModel = new DefaultListModel();
    private DefaultListModel patternListModel = new DefaultListModel();
    private DefaultComboBoxModel canvasComboListModel = new DefaultComboBoxModel();
    private ArrayList<Shape> shapes;
    private ArrayList<Canvas> canvas;
    private ArrayList<Pattern> patterns;
    /**
     * Creates new form FileGenerator
     */;

    /**
     * Creates new form FileGenerator
     */
    public FileGenerator() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        this.shapes = new ArrayList();
        this.canvas = new ArrayList();
        this.patterns = new ArrayList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shapebuttonGroup = new javax.swing.ButtonGroup();
        generate = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        gestureLabel = new javax.swing.JLabel();
        pinchCheckBox = new javax.swing.JCheckBox();
        dragCheckBox = new javax.swing.JCheckBox();
        rotateCheckBox = new javax.swing.JCheckBox();
        tapCheckBox = new javax.swing.JCheckBox();
        physicsLabel = new javax.swing.JLabel();
        physicsCheckBox = new javax.swing.JCheckBox();
        gravityCheckBox = new javax.swing.JCheckBox();
        xGravityLabel = new javax.swing.JLabel();
        xGravityTextField = new javax.swing.JTextField();
        yGravityLabel = new javax.swing.JLabel();
        yGravityTextField = new javax.swing.JTextField();
        networkLabel = new javax.swing.JLabel();
        networkCheckBox = new javax.swing.JCheckBox();
        serverIPLabel = new javax.swing.JLabel();
        serverPortLabel = new javax.swing.JLabel();
        serverIPTextField = new javax.swing.JTextField();
        serverPortTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        canvasNameLabel = new javax.swing.JLabel();
        CanvasNameTextField = new javax.swing.JTextField();
        canvasXPosTextField = new javax.swing.JTextField();
        canvasXPosLabel = new javax.swing.JLabel();
        canvasYPosLabel = new javax.swing.JLabel();
        canvasYPosTextField = new javax.swing.JTextField();
        canvasZPosLabel = new javax.swing.JLabel();
        canvasZPosTextField = new javax.swing.JTextField();
        canvasWidthLabel = new javax.swing.JLabel();
        canvasWidthTextField = new javax.swing.JTextField();
        canvasHeightLabel = new javax.swing.JLabel();
        canvasHeightTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        canvasList = new javax.swing.JList();
        canvasColorLabel = new javax.swing.JLabel();
        canvasColorTextField = new javax.swing.JTextField();
        addCanvasButton = new javax.swing.JButton();
        deleteCanvasButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        patternGestureCheckBox = new javax.swing.JCheckBox();
        PatternSizeLimitedCheckBox = new javax.swing.JCheckBox();
        patternAngleLimitedCheckBox = new javax.swing.JCheckBox();
        patternXLimitedCheckBox = new javax.swing.JCheckBox();
        patternYLimitedCheckBox = new javax.swing.JCheckBox();
        patternShowCheckBox = new javax.swing.JCheckBox();
        patternPhysicsCheckBox = new javax.swing.JCheckBox();
        patternSizeLimitLabel = new javax.swing.JLabel();
        patternSizeLimitTextField = new javax.swing.JTextField();
        patternAngleLimitLabel = new javax.swing.JLabel();
        patternAngleLimitTextField = new javax.swing.JTextField();
        patternXMinTextField = new javax.swing.JTextField();
        patternXMinLabel = new javax.swing.JLabel();
        patternYMinLabel = new javax.swing.JLabel();
        patternYMinTextField = new javax.swing.JTextField();
        patternYMaxLabel = new javax.swing.JLabel();
        patternYMaxTextField = new javax.swing.JTextField();
        patternXMaxTextField = new javax.swing.JTextField();
        patternXMaxLabel = new javax.swing.JLabel();
        patternAngleDeltaLabel = new javax.swing.JLabel();
        patternAngleDeltaTextField = new javax.swing.JTextField();
        patternSizeDeltaTextField = new javax.swing.JTextField();
        patternSizeDeltaLabel = new javax.swing.JLabel();
        patternNameLabel = new javax.swing.JLabel();
        patternNameTextField = new javax.swing.JTextField();
        patternContextLabel = new javax.swing.JLabel();
        patternCanvasComboBox = new javax.swing.JComboBox();
        patternColorLabel = new javax.swing.JLabel();
        patternColorTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        patternList = new javax.swing.JList();
        addPatternButton = new javax.swing.JButton();
        deletePatternButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        RectangleRadioButton = new javax.swing.JRadioButton();
        shapeNameLabel = new javax.swing.JLabel();
        CircleRadioButton = new javax.swing.JRadioButton();
        shapeNameTextField = new javax.swing.JTextField();
        radiusLabel = new javax.swing.JLabel();
        radiusTextField = new javax.swing.JTextField();
        widthLabel = new javax.swing.JLabel();
        widthTextField = new javax.swing.JTextField();
        heightLabel = new javax.swing.JLabel();
        heightTextField = new javax.swing.JTextField();
        colorTextField = new javax.swing.JTextField();
        colorLabel = new javax.swing.JLabel();
        yPosTextField = new javax.swing.JTextField();
        yPosLabel = new javax.swing.JLabel();
        xPosTextField = new javax.swing.JTextField();
        xPosLabel = new javax.swing.JLabel();
        shapePhysicsCheckBox = new javax.swing.JCheckBox();
        densityLabel = new javax.swing.JLabel();
        densityTextField = new javax.swing.JTextField();
        restitutionLabel = new javax.swing.JLabel();
        restitutionTextField = new javax.swing.JTextField();
        yVelocityTextField = new javax.swing.JTextField();
        xVelocityTextField = new javax.swing.JTextField();
        xVelocityLabel = new javax.swing.JLabel();
        dampingLabel = new javax.swing.JLabel();
        dampingTextField = new javax.swing.JTextField();
        linearVelocityCheckBox = new javax.swing.JCheckBox();
        linearDampingCheckBox = new javax.swing.JCheckBox();
        yVelocityLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        shapeList = new javax.swing.JList();
        addShapeButton = new javax.swing.JButton();
        deleteShapeButton = new javax.swing.JButton();
        shapeContextComboBox = new javax.swing.JComboBox();
        shapeContextLabel = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        networkBlobCheckBox = new javax.swing.JCheckBox();
        netBlobXSpeedCheckBox = new javax.swing.JCheckBox();
        netBlobYSpeedCheckBox = new javax.swing.JCheckBox();
        netBlobMotionAccelCheckBox = new javax.swing.JCheckBox();
        netBlobAngleCheckBox = new javax.swing.JCheckBox();
        netBlobAngleSpeedCheckBox = new javax.swing.JCheckBox();
        netBlobAngleAccelCheckBox = new javax.swing.JCheckBox();
        netBlobSendingFreqTextField = new javax.swing.JTextField();
        netBlobSendingFreqLabel = new javax.swing.JLabel();
        netBlobRealTimeSendingCheckBox = new javax.swing.JCheckBox();
        netBlobRelWidthCheckBox = new javax.swing.JCheckBox();
        netBlobXRelPosCheckBox = new javax.swing.JCheckBox();
        netBlobYRelPosCheckBox = new javax.swing.JCheckBox();
        netBlobRelHeightCheckBox = new javax.swing.JCheckBox();
        netBlobIdCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        networkCircleCheckBox = new javax.swing.JCheckBox();
        netCircleXRelPositionCheckBox = new javax.swing.JCheckBox();
        netCircleYRelPositionCheckBox = new javax.swing.JCheckBox();
        netCircleXSpeedCheckBox = new javax.swing.JCheckBox();
        netCircleYSpeedCheckBox = new javax.swing.JCheckBox();
        netCircleRelRadiusCheckBox = new javax.swing.JCheckBox();
        netCircleScaleCheckBox = new javax.swing.JCheckBox();
        netCircleColorCheckBox = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        networkRectangleCheckBox = new javax.swing.JCheckBox();
        netRectangleXRelPositionCheckBox = new javax.swing.JCheckBox();
        netRectangleYRelPositionCheckBox = new javax.swing.JCheckBox();
        netRectangleXSpeedCheckBox = new javax.swing.JCheckBox();
        netRectangleYSpeedCheckBox = new javax.swing.JCheckBox();
        netRectangleRelWidthCheckBox = new javax.swing.JCheckBox();
        netRectangleRelHeightCheckBox = new javax.swing.JCheckBox();
        netRectangleAngleCheckBox = new javax.swing.JCheckBox();
        netRectangleScaleCheckBox = new javax.swing.JCheckBox();
        netRectangleColorCheckBox = new javax.swing.JCheckBox();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        netRecepBlobCheckBox = new javax.swing.JCheckBox();
        netRecepBlobIdCheckBox = new javax.swing.JCheckBox();
        netRecepBlobXRelPosCheckBox = new javax.swing.JCheckBox();
        netRecepBlobYRelPosCheckBox = new javax.swing.JCheckBox();
        netRecepBlobXSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepBlobYSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepBlobMotionAccelCheckBox = new javax.swing.JCheckBox();
        netRecepBlobAngleAccelCheckBox = new javax.swing.JCheckBox();
        netRecepBlobAngleSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepBlobAngleCheckBox = new javax.swing.JCheckBox();
        netRecepBlobRelHeightCheckBox = new javax.swing.JCheckBox();
        netRecepBlobRelWidthCheckBox = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        netRecepCircleCheckBox = new javax.swing.JCheckBox();
        netRecepCircleXRelPositionCheckBox = new javax.swing.JCheckBox();
        netRecepCircleYRelPositionCheckBox = new javax.swing.JCheckBox();
        netRecepCircleXSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepCircleYSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepCircleRelRadiusCheckBox = new javax.swing.JCheckBox();
        netRecepCircleScaleCheckBox = new javax.swing.JCheckBox();
        netRecepCircleColorCheckBox = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        netRecepRectangleCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleXRelPositionCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleYRelPositionCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleXSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleYSpeedCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleAngleCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleRelHeightCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleRelWidthCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleScaleCheckBox = new javax.swing.JCheckBox();
        netRecepRectangleColorCheckBox = new javax.swing.JCheckBox();
        fileName = new javax.swing.JTextField();
        fileNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GUI");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("GUI"); // NOI18N
        setResizable(false);

        generate.setText("Generate");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        gestureLabel.setText("Gesture recognition :");

        pinchCheckBox.setText(" Pinch");
        pinchCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinchCheckBoxActionPerformed(evt);
            }
        });

        dragCheckBox.setText("Drag");
        dragCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragCheckBoxActionPerformed(evt);
            }
        });

        rotateCheckBox.setText("Rotation");

        tapCheckBox.setText("Tap");

        physicsLabel.setText("Physics :");

        physicsCheckBox.setText("Turn on the physics");
        physicsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                physicsCheckBoxActionPerformed(evt);
            }
        });

        gravityCheckBox.setText("Turn on the gravity");
        gravityCheckBox.setEnabled(false);
        gravityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gravityCheckBoxActionPerformed(evt);
            }
        });

        xGravityLabel.setText("x : ");

        xGravityTextField.setText("0");
        xGravityTextField.setEnabled(false);
        xGravityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xGravityTextFieldActionPerformed(evt);
            }
        });

        yGravityLabel.setText("y : ");

        yGravityTextField.setText("0");
        yGravityTextField.setEnabled(false);

        networkLabel.setText("Network :");

        networkCheckBox.setText("Turn on the network");
        networkCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkCheckBoxActionPerformed(evt);
            }
        });

        serverIPLabel.setText("Server IP :");

        serverPortLabel.setText("Port :");

        serverIPTextField.setText("127.0.0.1");
        serverIPTextField.setEnabled(false);

        serverPortTextField.setText("1337");
        serverPortTextField.setEnabled(false);
        serverPortTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(gravityCheckBox)
                        .addGap(30, 30, 30)
                        .addComponent(xGravityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xGravityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yGravityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yGravityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(physicsCheckBox)
                    .addComponent(gestureLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pinchCheckBox)
                            .addComponent(rotateCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tapCheckBox)
                            .addComponent(dragCheckBox)))
                    .addComponent(physicsLabel)
                    .addComponent(networkLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(networkCheckBox)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverIPLabel)
                            .addComponent(serverPortLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverIPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gestureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pinchCheckBox)
                    .addComponent(dragCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tapCheckBox)
                    .addComponent(rotateCheckBox))
                .addGap(18, 18, 18)
                .addComponent(physicsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(physicsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gravityCheckBox)
                    .addComponent(xGravityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yGravityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xGravityLabel)
                    .addComponent(yGravityLabel))
                .addGap(18, 18, 18)
                .addComponent(networkLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkCheckBox)
                    .addComponent(serverIPLabel)
                    .addComponent(serverIPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortLabel)
                    .addComponent(serverPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Global", jPanel1);

        canvasNameLabel.setText("Canvas name :");

        canvasXPosTextField.setText("0.0");
        canvasXPosTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canvasXPosTextFieldActionPerformed(evt);
            }
        });

        canvasXPosLabel.setText("x :");

        canvasYPosLabel.setText("y :");

        canvasYPosTextField.setText("0.0");
        canvasYPosTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canvasYPosTextFieldActionPerformed(evt);
            }
        });

        canvasZPosLabel.setText("z :");

        canvasZPosTextField.setText("0");

        canvasWidthLabel.setText("Width :");

        canvasWidthTextField.setText("1.0");

        canvasHeightLabel.setText("Height :");

        canvasHeightTextField.setText("1.0");

        canvasList.setModel(canvasListModel);
        canvasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                canvasListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(canvasList);

        canvasColorLabel.setText("Color :");

        canvasColorTextField.setText("#000000");
        canvasColorTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canvasColorTextFieldActionPerformed(evt);
            }
        });

        addCanvasButton.setText("Add Canvas");
        addCanvasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCanvasButtonActionPerformed(evt);
            }
        });

        deleteCanvasButton.setText("Delete");
        deleteCanvasButton.setEnabled(false);
        deleteCanvasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCanvasButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(canvasNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CanvasNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(canvasXPosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasXPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(canvasYPosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasYPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasZPosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasZPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(canvasHeightLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(canvasWidthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(canvasColorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvasColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addCanvasButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteCanvasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CanvasNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvasNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(canvasXPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvasXPosLabel)
                            .addComponent(canvasYPosLabel)
                            .addComponent(canvasYPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvasZPosLabel)
                            .addComponent(canvasZPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(canvasWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvasWidthLabel)
                            .addComponent(canvasHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvasHeightLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(canvasColorLabel)
                            .addComponent(canvasColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(addCanvasButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCanvasButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Canvas", jPanel2);

        patternGestureCheckBox.setText("Turn on the gesture recognition");

        PatternSizeLimitedCheckBox.setText("Size limit");
        PatternSizeLimitedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatternSizeLimitedCheckBoxActionPerformed(evt);
            }
        });

        patternAngleLimitedCheckBox.setText("Angle limit");
        patternAngleLimitedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternAngleLimitedCheckBoxActionPerformed(evt);
            }
        });

        patternXLimitedCheckBox.setText("X limit");
        patternXLimitedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternXLimitedCheckBoxActionPerformed(evt);
            }
        });

        patternYLimitedCheckBox.setText("Y limit");
        patternYLimitedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternYLimitedCheckBoxActionPerformed(evt);
            }
        });

        patternShowCheckBox.setText("Draw the blobs");

        patternPhysicsCheckBox.setText("Turn on the physics for the blobs");
        patternPhysicsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternPhysicsCheckBoxActionPerformed(evt);
            }
        });

        patternSizeLimitLabel.setText("Aera :");

        patternSizeLimitTextField.setText("0");
        patternSizeLimitTextField.setEnabled(false);

        patternAngleLimitLabel.setText("Angle :");

        patternAngleLimitTextField.setText("0");
        patternAngleLimitTextField.setEnabled(false);

        patternXMinTextField.setText("0.0");
        patternXMinTextField.setEnabled(false);

        patternXMinLabel.setText("XMin :");

        patternYMinLabel.setText("YMin :");

        patternYMinTextField.setText("0.0");
        patternYMinTextField.setEnabled(false);

        patternYMaxLabel.setText("YMax :");

        patternYMaxTextField.setText("1.0");
        patternYMaxTextField.setEnabled(false);

        patternXMaxTextField.setText("1.0");
        patternXMaxTextField.setEnabled(false);
        patternXMaxTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternXMaxTextFieldActionPerformed(evt);
            }
        });

        patternXMaxLabel.setText("XMax :");

        patternAngleDeltaLabel.setText("Delta :");

        patternAngleDeltaTextField.setText("0");
        patternAngleDeltaTextField.setEnabled(false);

        patternSizeDeltaTextField.setText("0");
        patternSizeDeltaTextField.setEnabled(false);

        patternSizeDeltaLabel.setText("Delta :");

        patternNameLabel.setText("Pattern name :");

        patternContextLabel.setText("Canvas :");

        patternCanvasComboBox.setModel(canvasComboListModel);

        patternColorLabel.setText("Color :");

        patternColorTextField.setText("#FFFFFF");

        patternList.setModel(patternListModel);
        patternList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                patternListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(patternList);

        addPatternButton.setText("Add Pattern");
        addPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatternButtonActionPerformed(evt);
            }
        });

        deletePatternButton.setText("Delete");
        deletePatternButton.setEnabled(false);
        deletePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatternButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patternXLimitedCheckBox)
                            .addComponent(patternYLimitedCheckBox)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(PatternSizeLimitedCheckBox)
                                                .addGap(26, 26, 26)
                                                .addComponent(patternSizeLimitLabel))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(patternAngleLimitedCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(patternAngleLimitLabel)))
                                        .addComponent(patternXMinLabel)
                                        .addComponent(patternYMinLabel))
                                    .addComponent(patternShowCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patternYMinTextField)
                                    .addComponent(patternXMinTextField)
                                    .addComponent(patternSizeLimitTextField)
                                    .addComponent(patternAngleLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(patternAngleDeltaLabel)
                                        .addComponent(patternSizeDeltaLabel)
                                        .addComponent(patternXMaxLabel))
                                    .addComponent(patternYMaxLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patternYMaxTextField)
                                    .addComponent(patternSizeDeltaTextField)
                                    .addComponent(patternAngleDeltaTextField)
                                    .addComponent(patternXMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(patternGestureCheckBox)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(patternNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patternNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patternPhysicsCheckBox)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(patternContextLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patternCanvasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(patternColorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patternColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addPatternButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deletePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patternNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patternGestureCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PatternSizeLimitedCheckBox)
                            .addComponent(patternSizeLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternSizeLimitLabel)
                            .addComponent(patternSizeDeltaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternSizeDeltaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patternAngleLimitedCheckBox)
                            .addComponent(patternAngleLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternAngleLimitLabel)
                            .addComponent(patternAngleDeltaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternAngleDeltaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patternXLimitedCheckBox)
                            .addComponent(patternXMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternXMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternXMinLabel)
                            .addComponent(patternXMaxLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patternYLimitedCheckBox)
                            .addComponent(patternYMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternYMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patternYMinLabel)
                            .addComponent(patternYMaxLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternShowCheckBox))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(patternPhysicsCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patternCanvasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(patternContextLabel)
                                .addComponent(patternColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(patternColorLabel))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(addPatternButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletePatternButton)))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Patterns", jPanel3);

        shapebuttonGroup.add(RectangleRadioButton);
        RectangleRadioButton.setText("Rectangle");
        RectangleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleRadioButtonActionPerformed(evt);
            }
        });

        shapeNameLabel.setText("Name :");

        shapebuttonGroup.add(CircleRadioButton);
        CircleRadioButton.setSelected(true);
        CircleRadioButton.setText("Circle");
        CircleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleRadioButtonActionPerformed(evt);
            }
        });

        radiusLabel.setText("Radius :");

        radiusTextField.setText("0.0");
        radiusTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        widthLabel.setText("Width");

        widthTextField.setText("0.0");
        widthTextField.setEnabled(false);
        widthTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        heightLabel.setText("Height :");

        heightTextField.setText("0.0");
        heightTextField.setEnabled(false);
        heightTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        colorTextField.setText("#FFFFFF");

        colorLabel.setText("Color :");

        yPosTextField.setText("0.0");
        yPosTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        yPosLabel.setText("Pos Y :");

        xPosTextField.setText("0.0");
        xPosTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        xPosLabel.setText("Pos X :");

        shapePhysicsCheckBox.setText("Turn on the physics");
        shapePhysicsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapePhysicsCheckBoxActionPerformed(evt);
            }
        });

        densityLabel.setText("Density :");

        densityTextField.setText("1.0");
        densityTextField.setEnabled(false);

        restitutionLabel.setText("Restitution :");

        restitutionTextField.setText("1.0");
        restitutionTextField.setEnabled(false);
        restitutionTextField.setPreferredSize(new java.awt.Dimension(25, 27));

        yVelocityTextField.setText("0");
        yVelocityTextField.setEnabled(false);
        yVelocityTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        xVelocityTextField.setText("0");
        xVelocityTextField.setEnabled(false);
        xVelocityTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        xVelocityLabel.setText("x :");

        dampingLabel.setText("coefficient :");

        dampingTextField.setText("0.0");
        dampingTextField.setEnabled(false);
        dampingTextField.setPreferredSize(new java.awt.Dimension(40, 27));

        linearVelocityCheckBox.setText("Linear velocity");
        linearVelocityCheckBox.setEnabled(false);
        linearVelocityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearVelocityCheckBoxActionPerformed(evt);
            }
        });

        linearDampingCheckBox.setText("Linear damping");
        linearDampingCheckBox.setEnabled(false);
        linearDampingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearDampingCheckBoxActionPerformed(evt);
            }
        });

        yVelocityLabel.setText("y :");

        shapeList.setModel(listModel);
        shapeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                shapeListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(shapeList);

        addShapeButton.setText("Add shape");
        addShapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addShapeButtonActionPerformed(evt);
            }
        });

        deleteShapeButton.setText("Delete");
        deleteShapeButton.setEnabled(false);
        deleteShapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShapeButtonActionPerformed(evt);
            }
        });

        shapeContextComboBox.setModel(canvasComboListModel);

        shapeContextLabel.setText("Canvas :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(linearDampingCheckBox)
                                    .addComponent(shapePhysicsCheckBox)
                                    .addComponent(linearVelocityCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(dampingLabel)
                                        .addGap(10, 10, 10)
                                        .addComponent(dampingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(densityLabel)
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(xVelocityLabel)
                                                .addGap(12, 12, 12)
                                                .addComponent(xVelocityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(yVelocityLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(yVelocityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(densityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(restitutionLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(restitutionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(shapeContextLabel)
                                .addGap(15, 15, 15)
                                .addComponent(shapeContextComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radiusLabel)
                                    .addComponent(xPosLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radiusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(xPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(colorLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(colorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(heightLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(heightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(CircleRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RectangleRadioButton)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(widthLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(widthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(yPosLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(yPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(shapeNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shapeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteShapeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addShapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linearDampingCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shapeContextComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shapeContextLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(addShapeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteShapeButton)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CircleRadioButton)
                            .addComponent(RectangleRadioButton)
                            .addComponent(shapeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shapeNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radiusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(widthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heightLabel)
                            .addComponent(widthLabel)
                            .addComponent(radiusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(xPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yPosTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xPosLabel)
                            .addComponent(yPosLabel)
                            .addComponent(colorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(shapePhysicsCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(linearVelocityCheckBox))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(densityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(restitutionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(densityLabel)
                                    .addComponent(restitutionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(xVelocityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yVelocityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(xVelocityLabel)
                                    .addComponent(yVelocityLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dampingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dampingLabel)))))))
        );

        jTabbedPane1.addTab("Shapes", jPanel4);

        networkBlobCheckBox.setText("Turn on blobs sending");
        networkBlobCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkBlobCheckBoxActionPerformed(evt);
            }
        });

        netBlobXSpeedCheckBox.setText("X speed");
        netBlobXSpeedCheckBox.setEnabled(false);

        netBlobYSpeedCheckBox.setText("Y speed");
        netBlobYSpeedCheckBox.setEnabled(false);

        netBlobMotionAccelCheckBox.setText("Linear acceleration");
        netBlobMotionAccelCheckBox.setEnabled(false);

        netBlobAngleCheckBox.setText("Angle");
        netBlobAngleCheckBox.setEnabled(false);

        netBlobAngleSpeedCheckBox.setText("Angular speed");
        netBlobAngleSpeedCheckBox.setEnabled(false);

        netBlobAngleAccelCheckBox.setText("Angular acceleration");
        netBlobAngleAccelCheckBox.setEnabled(false);

        netBlobSendingFreqTextField.setText("100");
        netBlobSendingFreqTextField.setEnabled(false);

        netBlobSendingFreqLabel.setText("Sending frequency :");

        netBlobRealTimeSendingCheckBox.setText("Real time");
        netBlobRealTimeSendingCheckBox.setEnabled(false);
        netBlobRealTimeSendingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netBlobRealTimeSendingCheckBoxActionPerformed(evt);
            }
        });

        netBlobRelWidthCheckBox.setText("Relative width");
        netBlobRelWidthCheckBox.setEnabled(false);

        netBlobXRelPosCheckBox.setText("Relative X");
        netBlobXRelPosCheckBox.setEnabled(false);

        netBlobYRelPosCheckBox.setText("Relative Y");
        netBlobYRelPosCheckBox.setEnabled(false);

        netBlobRelHeightCheckBox.setText("Relative height");
        netBlobRelHeightCheckBox.setEnabled(false);

        netBlobIdCheckBox.setText("ID");
        netBlobIdCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(networkBlobCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                        .addComponent(netBlobRealTimeSendingCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(netBlobSendingFreqLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobSendingFreqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netBlobYSpeedCheckBox)
                            .addComponent(netBlobMotionAccelCheckBox)
                            .addComponent(netBlobXSpeedCheckBox)
                            .addComponent(netBlobXRelPosCheckBox)
                            .addComponent(netBlobYRelPosCheckBox)
                            .addComponent(netBlobIdCheckBox))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netBlobRelHeightCheckBox)
                            .addComponent(netBlobRelWidthCheckBox)
                            .addComponent(netBlobAngleCheckBox)
                            .addComponent(netBlobAngleSpeedCheckBox)
                            .addComponent(netBlobAngleAccelCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkBlobCheckBox)
                    .addComponent(netBlobSendingFreqTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(netBlobSendingFreqLabel)
                    .addComponent(netBlobRealTimeSendingCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(netBlobIdCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobXRelPosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobYRelPosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobXSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobYSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobMotionAccelCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(netBlobRelWidthCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobRelHeightCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobAngleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobAngleSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netBlobAngleAccelCheckBox)
                        .addGap(23, 23, 23)))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Blob", jPanel6);

        networkCircleCheckBox.setText("Turn on Circles sending");
        networkCircleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkCircleCheckBoxActionPerformed(evt);
            }
        });

        netCircleXRelPositionCheckBox.setText("Relative X");
        netCircleXRelPositionCheckBox.setEnabled(false);

        netCircleYRelPositionCheckBox.setText("Relative Y");
        netCircleYRelPositionCheckBox.setEnabled(false);

        netCircleXSpeedCheckBox.setText("X speed");
        netCircleXSpeedCheckBox.setEnabled(false);

        netCircleYSpeedCheckBox.setText("Y speed");
        netCircleYSpeedCheckBox.setEnabled(false);

        netCircleRelRadiusCheckBox.setText("Relatif radius");
        netCircleRelRadiusCheckBox.setEnabled(false);

        netCircleScaleCheckBox.setText("Scale");
        netCircleScaleCheckBox.setEnabled(false);
        netCircleScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netCircleScaleCheckBoxActionPerformed(evt);
            }
        });

        netCircleColorCheckBox.setText("Color");
        netCircleColorCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(networkCircleCheckBox)
                        .addGap(6, 362, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netCircleYRelPositionCheckBox)
                            .addComponent(netCircleXSpeedCheckBox)
                            .addComponent(netCircleYSpeedCheckBox)
                            .addComponent(netCircleXRelPositionCheckBox))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(netCircleColorCheckBox)
                                .addContainerGap(329, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(netCircleRelRadiusCheckBox)
                                    .addComponent(netCircleScaleCheckBox))
                                .addGap(0, 291, Short.MAX_VALUE))))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(networkCircleCheckBox)
                .addGap(41, 41, 41)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(netCircleRelRadiusCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netCircleScaleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netCircleColorCheckBox))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(netCircleXRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netCircleYRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netCircleXSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netCircleYSpeedCheckBox)))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Circle", jPanel7);

        networkRectangleCheckBox.setText("Turn on Rectangles sending");
        networkRectangleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkRectangleCheckBoxActionPerformed(evt);
            }
        });

        netRectangleXRelPositionCheckBox.setText("Relative X");
        netRectangleXRelPositionCheckBox.setEnabled(false);

        netRectangleYRelPositionCheckBox.setText("Relative Y");
        netRectangleYRelPositionCheckBox.setEnabled(false);

        netRectangleXSpeedCheckBox.setText("X speed");
        netRectangleXSpeedCheckBox.setEnabled(false);
        netRectangleXSpeedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRectangleXSpeedCheckBoxActionPerformed(evt);
            }
        });

        netRectangleYSpeedCheckBox.setText("Y speed");
        netRectangleYSpeedCheckBox.setEnabled(false);

        netRectangleRelWidthCheckBox.setText("Relative width");
        netRectangleRelWidthCheckBox.setEnabled(false);

        netRectangleRelHeightCheckBox.setText("Relative height");
        netRectangleRelHeightCheckBox.setEnabled(false);

        netRectangleAngleCheckBox.setText("Angle");
        netRectangleAngleCheckBox.setEnabled(false);

        netRectangleScaleCheckBox.setText("Scale");
        netRectangleScaleCheckBox.setEnabled(false);

        netRectangleColorCheckBox.setText("Color");
        netRectangleColorCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(networkRectangleCheckBox)
                    .addComponent(netRectangleYSpeedCheckBox)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRectangleYRelPositionCheckBox)
                            .addComponent(netRectangleXRelPositionCheckBox)
                            .addComponent(netRectangleXSpeedCheckBox))
                        .addGap(93, 93, 93)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRectangleAngleCheckBox)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(netRectangleRelHeightCheckBox)
                                    .addComponent(netRectangleRelWidthCheckBox))
                                .addGap(69, 69, 69)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(netRectangleColorCheckBox)
                                    .addComponent(netRectangleScaleCheckBox))))))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(networkRectangleCheckBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(netRectangleXRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRectangleYRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRectangleXSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRectangleYSpeedCheckBox))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(netRectangleRelWidthCheckBox)
                            .addComponent(netRectangleScaleCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(netRectangleRelHeightCheckBox)
                            .addComponent(netRectangleColorCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRectangleAngleCheckBox)))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Rectangle", jPanel8);

        jTabbedPane1.addTab("Network send", jTabbedPane2);

        netRecepBlobCheckBox.setText("Turn on Blobs reception");
        netRecepBlobCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRecepBlobCheckBoxActionPerformed(evt);
            }
        });

        netRecepBlobIdCheckBox.setText("ID");
        netRecepBlobIdCheckBox.setEnabled(false);

        netRecepBlobXRelPosCheckBox.setText("Relative X");
        netRecepBlobXRelPosCheckBox.setEnabled(false);

        netRecepBlobYRelPosCheckBox.setText("Relative Y");
        netRecepBlobYRelPosCheckBox.setEnabled(false);

        netRecepBlobXSpeedCheckBox.setText("X speed");
        netRecepBlobXSpeedCheckBox.setEnabled(false);

        netRecepBlobYSpeedCheckBox.setText("Y speed");
        netRecepBlobYSpeedCheckBox.setEnabled(false);

        netRecepBlobMotionAccelCheckBox.setText("Linear acceleration");
        netRecepBlobMotionAccelCheckBox.setEnabled(false);

        netRecepBlobAngleAccelCheckBox.setText("Angular acceleration");
        netRecepBlobAngleAccelCheckBox.setEnabled(false);

        netRecepBlobAngleSpeedCheckBox.setText("Angular speed");
        netRecepBlobAngleSpeedCheckBox.setEnabled(false);

        netRecepBlobAngleCheckBox.setText("Angle");
        netRecepBlobAngleCheckBox.setEnabled(false);

        netRecepBlobRelHeightCheckBox.setText("Relative height");
        netRecepBlobRelHeightCheckBox.setEnabled(false);

        netRecepBlobRelWidthCheckBox.setText("Relative width");
        netRecepBlobRelWidthCheckBox.setEnabled(false);
        netRecepBlobRelWidthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRecepBlobRelWidthCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(netRecepBlobCheckBox)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepBlobYSpeedCheckBox)
                            .addComponent(netRecepBlobMotionAccelCheckBox)
                            .addComponent(netRecepBlobXSpeedCheckBox)
                            .addComponent(netRecepBlobXRelPosCheckBox)
                            .addComponent(netRecepBlobYRelPosCheckBox)
                            .addComponent(netRecepBlobIdCheckBox))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepBlobRelHeightCheckBox)
                            .addComponent(netRecepBlobRelWidthCheckBox)
                            .addComponent(netRecepBlobAngleCheckBox)
                            .addComponent(netRecepBlobAngleSpeedCheckBox)
                            .addComponent(netRecepBlobAngleAccelCheckBox))))
                .addContainerGap(214, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(netRecepBlobRelWidthCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobRelHeightCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobAngleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobAngleSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobAngleAccelCheckBox)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(netRecepBlobCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(netRecepBlobIdCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobXRelPosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobYRelPosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobXSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobYSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepBlobMotionAccelCheckBox)))
                .addGap(56, 56, 56))
        );

        jTabbedPane3.addTab("Blob", jPanel5);

        netRecepCircleCheckBox.setText("Turn on Circles reception");
        netRecepCircleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRecepCircleCheckBoxActionPerformed(evt);
            }
        });

        netRecepCircleXRelPositionCheckBox.setText("Relative X");
        netRecepCircleXRelPositionCheckBox.setEnabled(false);

        netRecepCircleYRelPositionCheckBox.setText("Relative Y");
        netRecepCircleYRelPositionCheckBox.setEnabled(false);

        netRecepCircleXSpeedCheckBox.setText("X speed");
        netRecepCircleXSpeedCheckBox.setEnabled(false);

        netRecepCircleYSpeedCheckBox.setText("Y speed");
        netRecepCircleYSpeedCheckBox.setEnabled(false);

        netRecepCircleRelRadiusCheckBox.setText("Relatif radius");
        netRecepCircleRelRadiusCheckBox.setEnabled(false);

        netRecepCircleScaleCheckBox.setText("Scale");
        netRecepCircleScaleCheckBox.setEnabled(false);
        netRecepCircleScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRecepCircleScaleCheckBoxActionPerformed(evt);
            }
        });

        netRecepCircleColorCheckBox.setText("Color");
        netRecepCircleColorCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepCircleYRelPositionCheckBox)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(netRecepCircleXSpeedCheckBox)
                                .addComponent(netRecepCircleYSpeedCheckBox)
                                .addComponent(netRecepCircleXRelPositionCheckBox)))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepCircleRelRadiusCheckBox)
                            .addComponent(netRecepCircleColorCheckBox)
                            .addComponent(netRecepCircleScaleCheckBox)))
                    .addComponent(netRecepCircleCheckBox))
                .addContainerGap(290, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(netRecepCircleCheckBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(netRecepCircleXRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepCircleYRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepCircleXSpeedCheckBox))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(netRecepCircleRelRadiusCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepCircleScaleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepCircleColorCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netRecepCircleYSpeedCheckBox)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Circle", jPanel9);

        netRecepRectangleCheckBox.setText("Turn on Rectangle reception");
        netRecepRectangleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netRecepRectangleCheckBoxActionPerformed(evt);
            }
        });

        netRecepRectangleXRelPositionCheckBox.setText("Relative X");
        netRecepRectangleXRelPositionCheckBox.setEnabled(false);

        netRecepRectangleYRelPositionCheckBox.setText("Relative Y");
        netRecepRectangleYRelPositionCheckBox.setEnabled(false);

        netRecepRectangleXSpeedCheckBox.setText("X speed");
        netRecepRectangleXSpeedCheckBox.setEnabled(false);

        netRecepRectangleYSpeedCheckBox.setText("Y speed");
        netRecepRectangleYSpeedCheckBox.setEnabled(false);

        netRecepRectangleAngleCheckBox.setText("Angle");
        netRecepRectangleAngleCheckBox.setEnabled(false);

        netRecepRectangleRelHeightCheckBox.setText("Relative height");
        netRecepRectangleRelHeightCheckBox.setEnabled(false);

        netRecepRectangleRelWidthCheckBox.setText("Relative Width");
        netRecepRectangleRelWidthCheckBox.setEnabled(false);

        netRecepRectangleScaleCheckBox.setText("Scale");
        netRecepRectangleScaleCheckBox.setEnabled(false);

        netRecepRectangleColorCheckBox.setText("Color");
        netRecepRectangleColorCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(netRecepRectangleCheckBox)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepRectangleYRelPositionCheckBox)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(netRecepRectangleXSpeedCheckBox)
                                .addComponent(netRecepRectangleYSpeedCheckBox)
                                .addComponent(netRecepRectangleXRelPositionCheckBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(netRecepRectangleRelWidthCheckBox)
                            .addComponent(netRecepRectangleRelHeightCheckBox)
                            .addComponent(netRecepRectangleAngleCheckBox))
                        .addGap(1, 1, 1)))
                .addGap(86, 86, 86)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(netRecepRectangleScaleCheckBox)
                    .addComponent(netRecepRectangleColorCheckBox))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(netRecepRectangleCheckBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(netRecepRectangleScaleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleColorCheckBox))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(netRecepRectangleXRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleYRelPositionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleXSpeedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleYSpeedCheckBox))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(netRecepRectangleRelWidthCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleRelHeightCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netRecepRectangleAngleCheckBox)))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Rectangle", jPanel10);

        jTabbedPane1.addTab("Network receive", jTabbedPane3);

        fileNameLabel.setText("Name :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(generate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fileNameLabel)
                                .addGap(3, 3, 3)
                                .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        try {
            String nom = fileName.getText();
            if (nom.isEmpty()) {
                nom = "monfichier";
            }
            nom += ".html";
            java.io.File fichier = new java.io.File(nom);
            fichier.createNewFile();

            BufferedWriter bw = null;
            try {
                bw = new BufferedWriter(new FileWriter(fichier));
                bw.write("<!doctype html>\n");
                bw.write("<html lang=\"en\">\n");
                bw.write("\t<head>\n");
                bw.write("\t\t<meta charset=\"utf-8\">\n");
                bw.write("\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n");
                bw.write("\t\t<title>" + nom + "</title>\n");
                bw.write("\t\t<meta name=\"description\" content=\"\">\n");
                bw.write("\t\t<meta name=\"viewport\" content=\"width=device-width\">\n");
                bw.write("\t</head>\n");
                bw.write("\t<body>\n");
                bw.write("\t\t<div style=\"position: relative;\">\n");
                for (Canvas c : canvas) {
                    bw.write("\t\t\t<canvas id=\"" + c.getName() + "\" width=\"0\" height=\"0\" style=\"position: absolute; left: 0; top : 0; z-index: " + c.getzPos() + ";\"></canvas>\n");
                }
                bw.write("\t\t</div>\n");

                bw.write("\t\t<script src=\"libs/prototype-1.6.0.2.js\"></script>\n");
                bw.write("\t\t<script src=\"../libs/jquery-1.7.2.js\"></script>\n");
                bw.write("\t\t<script src=\"libs/requestanimationframe.js\"></script>\n");
                bw.write("\t\t<script src='js/box2d/common/b2Settings.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/common/math/b2Vec2.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/common/math/b2Mat22.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/common/math/b2Math.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2AABB.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Bound.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2BoundValues.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Pair.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2PairCallback.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2BufferedPair.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2PairManager.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2BroadPhase.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Collision.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/Features.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2ContactID.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2ContactPoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Distance.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Manifold.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2OBB.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/b2Proxy.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/ClipVertex.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2Shape.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2ShapeDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2BoxDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2CircleDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2CircleShape.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2MassData.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2PolyDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/collision/shapes/b2PolyShape.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2Body.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2BodyDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2CollisionFilter.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2Island.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2TimeStep.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2ContactNode.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2Contact.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2ContactConstraint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2ContactConstraintPoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2ContactRegister.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2ContactSolver.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2CircleContact.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2Conservative.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2NullContact.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2PolyAndCircleContact.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/contacts/b2PolyContact.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2ContactManager.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2World.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/b2WorldListener.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2JointNode.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2Joint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2JointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2DistanceJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2DistanceJointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2Jacobian.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2GearJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2GearJointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2MouseJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2MouseJointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2PrismaticJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2PrismaticJointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2PulleyJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2PulleyJointDef.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2RevoluteJoint.js'></script>\n");
                bw.write("\t\t<script src='js/box2d/dynamics/joints/b2RevoluteJointDef.js'></script>\n");
                bw.write("\t\t<script src='draw_world.js'></script>\n");
                bw.write("\t\t<script src=\"../libs/lodash.js\"></script>\n");
                bw.write("\t\t<script src=\"../libs/socket.io.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Tuio.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/hammer.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Pattern.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Shape.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Circle.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Rectangle.js\"></script>\n");
                bw.write("\t\t<script src=\"../dist/Manager.js\"></script>\n");
                bw.write("\t\t<script>\n");
                bw.write("\t\t$.noConflict();\n");
                bw.write("\t\tjQuery(document).ready(function($) {\n");
                //Déclarations des variables
                bw.write("\t\t\tHammer.plugins.fakeMultitouch();\n");
                bw.write("\t\t\tvar client = new Tuio.Client({\n");
                bw.write("\t\t\t\thost: \"http://localhost:5000\"\n");
                bw.write("\t\t\t}),\n");
                bw.write("\t\t\tscreenW = $(window).width(),\n");
                bw.write("\t\t\tscreenH = $(window).height(),\n");
                bw.write("\t\t\tmanager = new Manager(),\n");

                for (Canvas c : canvas) {
                    bw.write("\t\t\tcanvas" + c.getName() + " = null, \n");
                    bw.write("\t\t\tcontext" + c.getName() + " = null,\n");
                }

                for (Shape s : shapes) {
                    if (s instanceof Circle) {
                        bw.write("\t\t\t" + s.getName() + " = new Circle(),\n");
                    } else if (s instanceof Rectangle) {
                        bw.write("\t\t\t" + s.getName() + " = new Rectangle(),\n");
                    }
                }

                for (Pattern p : patterns) {
                    bw.write("\t\t\t" + p.getName() + " = new Pattern(),\n");
                }
                
                if (networkCheckBox.isSelected()) {
                    bw.write("\t\t\tsocket = io.connect(\"" + serverIPTextField.getText() + ":" + serverPortTextField.getText() + "\");\n");
                    bw.write("\t\t\tsocket.on(\"news\", function(data) {\n");
                    bw.write("\t\t\t\tsocket.emit(\"my other event\", {my: \"data\"});\n");
                    bw.write("\t\t\t});\n");
                }
                
                bw.write("\n");

                //Fonction de gestuelle
                bw.write("\t\t\tgesture = function(event) {\n");
                bw.write("\t\t\t\tif (event.type == \"release\") {\n");
                bw.write("\t\t\t\t//Gestion de la fin des évènements de pinch,rotate et drag\n");
                bw.write("\t\t\t\t}\n");
                if (pinchCheckBox.isSelected()){
                    bw.write("\t\t\t\tif (event.type == \"pinch\") \n");
                    bw.write("\t\t\t\t//Gestion des pinch\n");
                    bw.write("\t\t\t\t}\n");
                }
                if (rotateCheckBox.isSelected()) {
                    bw.write("\t\t\t\tif (event.type == \"rotate\") \n");
                    bw.write("\t\t\t\t//Gestion des rotations\n");
                    bw.write("\t\t\t\t}\n");
                }
                if (dragCheckBox.isSelected()) {
                    bw.write("\t\t\t\tif (event.type == \"drag\") \n");
                    bw.write("\t\t\t\t//Gestion des drags\n");
                    bw.write("\t\t\t\t}\n");
                }
                if (tapCheckBox.isSelected()){
                    bw.write("\t\t\t\tif (event.type == \"tap\") \n");
                    bw.write("\t\t\t\t//Gestion des taps\n");
                    bw.write("\t\t\t\t}\n");
                }
                bw.write("\t\t\t},\n");
                bw.write("\n");

                bw.write("\t\t\t\t\n");

                //Fonction d'initialisation
                bw.write("\t\t\tonConnect = function() {\n");
                bw.write("\t\t\t\t// Initialisation du canvas\n");
                for (Canvas c : canvas) {
                    bw.write("\t\t\t\tcanvas" + c.getName() +" = $(\"#" + c.getName() +"\").get(0);\n");
                    bw.write("\t\t\t\tcanvas" + c.getName() + ".width=screenW * " + String.valueOf(c.getWidth()) +";\n");
                    bw.write("\t\t\t\tcanvas" + c.getName() + ".height=screenH * " + String.valueOf(c.getHeight()) + ";\n");
                    bw.write("\t\t\t\tcanvas" + c.getName() + ".style.left = screenW * " + String.valueOf(c.getxPos()) + " + \"px\";\n");
                    bw.write("\t\t\t\tcanvas" + c.getName() + ".style.top = screenH * " + String.valueOf(c.getyPos()) + " + \"px\";\n");
                    bw.write("\t\t\t\tcontext" + c.getName() + " = canvas" + c.getName() + ".getContext(\"2d\");\n");
                }
                bw.write("\t\t\t\ttime = new Date().getTime();\n");
                bw.write("\n");
                bw.write("\t\t\t\t//Définition des patterns\n");
                for (Pattern p : patterns) {
                    if (p.isSizeLimited()) {
                        bw.write("\t\t\t\t" + p.getName() + ".addSizeLimit(" + p.getSize() + ", " + p.getDeltaSize() + ");\n");
                    }
                    if (p.isAngleLimited()) {
                        bw.write("\t\t\t\t" + p.getName() + ".addAngleLimit(" + p.getAngle() + ", " + p.getDeltaAngle() + ");\n");
                    }
                    if (p.isxLimited()) {
                        bw.write("\t\t\t\t" + p.getName() + ".addXLimit(" + p.getxMin() + ", " + p.getxMax() + ");\n");
                    }
                    if (p.isyLimited()) {
                        bw.write("\t\t\t\t" + p.getName() + ".addYLimit(" + p.getyMin() + ", " + p.getyMax() + ");\n");
                    }
                    bw.write("\t\t\t\tmanager.addPattern(" + p.getName() + ");\n");
                }
                bw.write("\n");
                bw.write("\t\t\t\t//Initialisation du manager\n");
                bw.write("\t\t\t\tmanager.setScreenSize(screenW, screenH);\n");
                bw.write("\t\t\t\tmanager.setOnGesture(gesture);\n");
                if (gravityCheckBox.isSelected()) {
                    bw.write("\t\t\t\tmanager.setGravity(" + xGravityTextField.getText() + "," + yGravityTextField.getText() + ");\n");
                }
                if (physicsCheckBox.isSelected()) {
                    bw.write("\t\t\t\tmanager.initPhysics();\n");
                }

                for (Shape s : shapes) {
                    bw.write("\n");
                    bw.write("\t\t\t\t" + s.getName() + ".setCanvasSize(canvas" + s.getContext() + ".width, canvas" +s.getContext() + ".height);\n" );
                    bw.write("\t\t\t\t" + s.getName() + ".setContext(context" + s.getContext() + ");\n");
                    if (s instanceof Circle) {
                        bw.write("\t\t\t\t" + s.getName() + ".setRelativeRadius("+ ((Circle)s).getRadius() +");\n");
                    } else if (s instanceof Rectangle) {
                        bw.write("\t\t\t\t" + s.getName() + ".setRelativeWidth("+ ((Rectangle)s).getWidth() +");\n");
                        bw.write("\t\t\t\t" + s.getName() + ".setRelativeHeight("+ ((Rectangle)s).getHeight() +");\n");
                    }
                    bw.write("\t\t\t\t" + s.getName() + ".setXRelativePosition(" + s.getPosX() + ");\n");
                    bw.write("\t\t\t\t" + s.getName() + ".setYRelativePosition(" + s.getPosY() + ");\n");
                    bw.write("\t\t\t\t" + s.getName() + ".setColor(\"" + s.getColor() + "\");\n");

                    if (s.isPhysics()) {
                        bw.write("\t\t\t\t" + s.getName() + ".setDensity(" + s.getDensity()+ ");\n");
                        bw.write("\t\t\t\t" + s.getName() + ".addPhysics(manager.getWorld(), " + s.getRestitution() + ");\n");
                        if (s.isVelocity()) {
                            bw.write("\t\t\t\t" + s.getName() + ".setLinearVelocity(" + s.getxVelocity() +", " + s.getyVelocity() + ");\n");
                        }
                        if (s.isDamping()) {
                            bw.write("\t\t\t\t" + s.getName() + ".setLinearDamping(" + s.getDampingCoeff() + ");\n");
                        }
                    }

                    if (s instanceof Circle) {
                        bw.write("\t\t\t\tmanager.addCircle(" + s.getName()+ ");\n");
                    } else if (s instanceof Rectangle) {
                        bw.write("\t\t\t\tmanager.addRectangle(" + s.getName()+ ");\n");
                    }
                }

                bw.write("\t\t\t},\n");
                bw.write("\n");

                if (netRecepBlobCheckBox.isSelected()){
                    bw.write("\t\t\tsocket.on('blob', function(data) {\n");
                    bw.write("\t\t\t\tvar obj = JSON.parse(data);\n");
                    bw.write("\t\t\t\tvar blob = new Tuio.Blob({\n");
                    if (netRecepBlobIdCheckBox.isSelected()){
                        bw.write("\t\t\t\tsi: obj[0].sessionId,\n");
                    } else {
                        bw.write("\t\t\t\tsi: 0,\n");
                    }
                    bw.write("\t\t\t\tbi: -1,\n");
                    if (netRecepBlobXRelPosCheckBox.isSelected()) {
                        bw.write("\t\t\t\txp: obj[0].xPos,\n");
                    } else {
                        bw.write("\t\t\t\txp: 0,\n");
                    }
                    if (netRecepBlobYRelPosCheckBox.isSelected()) {
                        bw.write("\t\t\t\typ: obj[0].yPos,\n");
                    } else {
                        bw.write("\t\t\t\typ: 0,\n");
                    }
                    if (netRecepBlobAngleCheckBox.isSelected()) {
                        bw.write("\t\t\t\ta: obj[0].angle,\n");
                    } else {
                        bw.write("\t\t\t\ta: 0,\n");
                    }
                    if (netRecepBlobXSpeedCheckBox.isSelected()) {
                        bw.write("\t\t\t\txs: obj[0].xSpeed,\n"); 
                    } else {
                        bw.write("\t\t\t\txs: 0,\n");
                    }
                    if (netRecepBlobYSpeedCheckBox.isSelected()) {
                        bw.write("\t\t\t\tys: obj[0].ySpeed,\n");
                    } else {
                        bw.write("\t\t\t\tys: 0,\n");
                    }
                    if (netRecepBlobAngleSpeedCheckBox.isSelected()) {
                        bw.write("\t\t\t\trs: obj[0].aSpeed,\n");
                    } else {
                        bw.write("\t\t\t\trs: 0,\n");
                    }
                    if (netRecepBlobMotionAccelCheckBox.isSelected()) {
                        bw.write("\t\t\t\tma: obj[0].motionSpeed,\n");
                    } else {
                        bw.write("\t\t\t\tma: 0,\n");
                    }
                    if (netRecepBlobAngleAccelCheckBox.isSelected()) {
                        bw.write("\t\t\t\tra: obj[0].aAccel,\n");
                    } else {
                        bw.write("\t\t\t\tra: 0,\n");
                    }
                    if (netRecepBlobRelWidthCheckBox.isSelected()) {
                        bw.write("\t\t\t\tw: obj[0].w,\n");
                    } else {
                        bw.write("\t\t\t\tw: 0,\n");
                    }
                    if (netRecepBlobRelHeightCheckBox.isSelected()) {
                        bw.write("\t\t\t\th: obj[0].h,\n");
                    } else {
                        bw.write("\t\t\t\th: 0,\n");
                    }
                    if (netRecepBlobRelWidthCheckBox.isSelected() && netRecepBlobRelHeightCheckBox.isSelected()){
                        bw.write("\t\t\t\tar: obj[0].h * obj[0].w\n");
                    } else {
                        bw.write("\t\t\t\tar: 0\n");
                    }             
                    bw.write("\t\t\t\t});\n");
                    bw.write("\n");
                    bw.write("\t\t\t\t//Le blob est disponible ici\n");
                    bw.write("\t\t\t});\n");   
                    bw.write("\n");
                }
                
                if (netRecepCircleCheckBox.isSelected()) {
                    bw.write("\t\t\tsocket.on('circle', function(data) {\n");
                    bw.write("\t\t\t\tvar obj = JSON.parse(data);\n");
                    bw.write("\t\t\t\tvar cercle = new Circle();\n");
                    bw.write("\t\t\t\t//Ajoutez un canvas au cercle pour l'affichage.\n");
                    if (netRecepCircleXRelPositionCheckBox.isSelected()) {
                        bw.write("\t\t\t\tcercle.setXRelativePosition(obj[0].xPos);\n");
                    }
                    if (netRecepCircleYRelPositionCheckBox.isSelected()) {
                        bw.write("\t\t\t\tcercle.setYRelativePosition(obj[0].yPos);\n");
                    }
                    if (netRecepCircleRelRadiusCheckBox.isSelected()) {
                        bw.write("\t\t\t\tcercle.setRelativeRadius(obj[0].radius);\n");
                    }
                    if (netRecepCircleScaleCheckBox.isSelected()) {
                        bw.write("\t\t\t\tcercle.setScale(obj[0].scale);\n");
                    }
                    if (netRecepCircleColorCheckBox.isSelected()) {
                        bw.write("\t\t\t\tcercle.setColor(obj[0].color);\n");
                    }
                    bw.write("\n");
                    bw.write("\t\t\t\t//Ajoutez de la physique si vous voulez utiliser les paramètres obj[0].xSpeed et obj[0].ySpeed\n");
                    bw.write("\t\t\t\t//Le cercle est disponible ici\n");
                    bw.write("\t\t\t});\n");
                    bw.write("\n");
                }
                
                if (netRecepRectangleCheckBox.isSelected()) {
                    bw.write("\t\t\tsocket.on('rectangle', function(data) {\n");
                    bw.write("\t\t\t\tvar obj = JSON.parse(data);\n");
                    bw.write("\t\t\t\tvar rect = new Rectangle();\n");
                    bw.write("\t\t\t\t//Ajoutez un canvas au rectangle pour l'affichage.\n");
                    if (netRecepRectangleXRelPositionCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setXRelativePosition(obj[0].xPos);\n");
                    }
                    if (netRecepRectangleYRelPositionCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setYRelativePosition(obj[0].yPos);\n");
                    }
                    if (netRecepRectangleRelWidthCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setRelativeWidth(obj[0].w);\n");
                    }
                    if (netRecepRectangleRelHeightCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setRelativeHeight(obj[0].w);\n");
                    }
                    if (netRecepRectangleScaleCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setScale(obj[0].scale);\n");
                    }
                    if (netRecepRectangleAngleCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setAngle(obj[0].angle);\n");
                    }
                    if (netRecepRectangleColorCheckBox.isSelected()) {
                        bw.write("\t\t\t\trect.setColor(obj[0].color);\n");
                    }
                    bw.write("\n");
                    bw.write("\t\t\t\t//Ajoutez de la physique si vous voulez utiliser les paramètres obj[0].xSpeed et obj[0].ySpeed\n");
                    bw.write("\t\t\t\t//Le rectangle est disponible ici\n");
                    bw.write("\t\t\t});\n");
                    bw.write("\n");
                }
                
                if (networkBlobCheckBox.isSelected() && !netBlobRealTimeSendingCheckBox.isSelected()) {
                    bw.write("\t\t\tsetInterval(sendBlob = function(blob) {\n");
                    bw.write("\t\t\t\tvar msg = {");
                    boolean blobMultipleParam = false;
                    if (netBlobXRelPosCheckBox.isSelected()){
                        bw.write("xPos: blob.getX()");
                        blobMultipleParam = true;
                    }
                    if (netBlobYRelPosCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("yPos: blob.getY()");
                        blobMultipleParam = true;
                    }
                    if (netBlobIdCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("sessionId: blob.getSessionId()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("angle: blob.getAngle()");
                        blobMultipleParam = true;
                    }
                    if (netBlobXSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("xSpeed: blob.getXSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobYSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("ySpeed: blob.getYSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("aSpeed: blob.getRotationSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobMotionAccelCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("motionSpeed: blob.getMotionSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleAccelCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("aAccel: blob.getRotationAccel()");
                        blobMultipleParam = true;
                    }
                    if (netBlobRelWidthCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("w: blob.getWidth()");
                        blobMultipleParam = true;
                    }
                    if (netBlobRelHeightCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("h: blob.getHeight()");
                    }
                    bw.write("};\n");
                    bw.write("\t\t\t\tsocket.emit('blob', msg);\n");
                    bw.write("\t\t\t}," + netBlobSendingFreqTextField.getText() + ");\n");
                    bw.write("\n");
                }
                
                if (networkCircleCheckBox.isSelected()){
                    bw.write("\t\t\tsendCircle = function(circle) {\n");
                    bw.write("\t\t\t\tvar msg = {");
                    boolean circleMultipleParam = false;
                    if (netCircleXRelPositionCheckBox.isSelected()){
                        bw.write("xPos: circle.getXRelativePosition()");
                        circleMultipleParam = true;
                    }
                    if (netCircleYRelPositionCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("yPos: circle.getYrelativePosition()");
                        circleMultipleParam = true;
                    }
                    if (netCircleScaleCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("scale: circle.getScale()");
                        circleMultipleParam = true;
                    }
                    if (netCircleRelRadiusCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("radius: circle.getRelativeRadius()");
                        circleMultipleParam = true;
                    }
                    if (netCircleColorCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("color: circle.getColor()");
                        circleMultipleParam = true;
                    }
                    if (netCircleYSpeedCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("ySpeed: circle.getYLinearVelocity()");
                        circleMultipleParam = true;
                    }
                    if (netCircleXSpeedCheckBox.isSelected()) {
                        if (circleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("xSpeed: circle.getXLinearVelocity()");
                    }
                    bw.write("};\n");
                    bw.write("\t\t\t\tsocket.emit('circle', msg);\n");
                    bw.write("\t\t\t},\n");
                    bw.write("\n");
                }
                
                if (networkRectangleCheckBox.isSelected()) {
                    bw.write("\t\t\tsendRectangle = function(rect) {\n");
                    bw.write("\t\t\t\tvar msg = {");
                    boolean rectangleMultipleParam = false;
                    if (netRectangleXRelPositionCheckBox.isSelected()){
                        bw.write("xPos: rect.getXRelativePosition()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleYRelPositionCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("yPos: rectangle.getYrelativePosition()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleScaleCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("scale: rectangle.getScale()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleColorCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("color: rectangle.getColor()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleRelWidthCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("w: rectangle.getRelativeWidth()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleRelHeightCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("h: rectangle.getRelativeHeight()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleXSpeedCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("xSpeed: rectangle.getXLinearVelocity()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleYSpeedCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("w: rectangle.getYLinearVelocity()");
                        rectangleMultipleParam = true;
                    }
                    if (netRectangleAngleCheckBox.isSelected()) {
                        if (rectangleMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("angle: rectangle.getAngle()");
                    }
                    bw.write("};\n");
                    bw.write("\t\t\t\tsocket.emit('rectangle', msg);\n");
                    bw.write("\t\t\t},\n");
                    bw.write("\n");
                }
                
                
                //Boucle d'affichage
                bw.write("\t\t\tdraw = function() {\n");
                for (Canvas c : canvas) {
                    bw.write("\t\t\t\tcontext" + c.getName() + ".fillStyle = \"" + c.getColor() + "\";\n");
                    bw.write("\t\t\t\tcontext" + c.getName() + ".fillRect(0, 0, canvas" + c.getName() + ".width, canvas" + c.getName() + ".height);\n");
                }

                bw.write("\t\t\t\tvar cursors = client.getTuioCursors();\n");
                bw.write("\t\t\t\tvar objects = client.getTuioObjects();\n");
                bw.write("\t\t\t\tvar blobs = client.getTuioBlobs();\n");
                bw.write("\n");
                bw.write("\t\t\t\tfor (var i in cursors) {\n");
                bw.write("\t\t\t\t\t//Gestion des curseurs\n");
                bw.write("\t\t\t\t};\n");
                bw.write("\n");
                bw.write("\t\t\t\tfor (var i in objects) {\n");
                bw.write("\t\t\t\t\t//Gestion des objets\n");
                bw.write("\t\t\t\t};\n");
                bw.write("\n");
                bw.write("\t\t\t\tfor (var i in blobs) {\n");
                bw.write("\t\t\t\t\t//Gestion des blobs\n");
                for(Pattern p : patterns) {
                    bw.write("\t\t\t\t\tif (manager.blobMatchPattern(blobs[i]," + p.getName() + ")) {\n");
                    if (p.isShown()) {
                        bw.write("\t\t\t\t\t\tblobs[i].setContext(context" + p.getContext() + ");\n");
                        bw.write("\t\t\t\t\t\tblobs[i].setColor(\"" + p.getColor() + "\");\n");
                    }
                    if (p.isPhysics()) {
                        bw.write("\t\t\t\t\t\tblobs[i].addPhysics(manager.getWorld(),screenW,screenH);\n");
                    }
                    bw.write("\t\t\t\t\t}\n");
                }
                bw.write("\t\t\t\t};\n");
                bw.write("\n");
                if (physicsCheckBox.isSelected()) {
                    bw.write("\t\t\t\tmanager.stepPhysics(1.0/30);\n");
                }
                bw.write("\n");
                bw.write("\t\t\t\tmanager.drawCircle();\n");
                bw.write("\t\t\t\tmanager.drawRectangle();\n");
                bw.write("\t\t\t\tmanager.drawBlobs(blobs);\n");
                bw.write("\n");
                
                if (networkBlobCheckBox.isSelected() && netBlobRealTimeSendingCheckBox.isSelected()) {
                    bw.write("\t\t\t\tfor (var i in blobs) {\n");
                    bw.write("\t\t\t\t\tvar msg = {");
                    boolean blobMultipleParam = false;
                    if (netBlobXRelPosCheckBox.isSelected()){
                        bw.write("xPos: blob[i].getX()");
                        blobMultipleParam = true;
                    }
                    if (netBlobYRelPosCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("yPos: blob[i].getY()");
                        blobMultipleParam = true;
                    }
                    if (netBlobIdCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("sessionId: blob[i].getSessionId()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("angle: blob[i].getAngle()");
                        blobMultipleParam = true;
                    }
                    if (netBlobXSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("xSpeed: blob[i].getXSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobYSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("ySpeed: blob[i].getYSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleSpeedCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("aSpeed: blob[i].getRotationSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobMotionAccelCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("motionSpeed: blob[i].getMotionSpeed()");
                        blobMultipleParam = true;
                    }
                    if (netBlobAngleAccelCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("aAccel: blob[i].getRotationAccel()");
                        blobMultipleParam = true;
                    }
                    if (netBlobRelWidthCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("w: blob[i].getWidth()");
                        blobMultipleParam = true;
                    }
                    if (netBlobRelHeightCheckBox.isSelected()) {
                        if (blobMultipleParam) {
                            bw.write(", ");
                        }
                        bw.write("h: blob[i].getHeight()");
                    }
                    bw.write("};\n");
                    bw.write("\t\t\t\t\tsocket.emit('blob', msg);\n");
                    bw.write("\t\t\t\t}\n");
                    bw.write("\n");
                }
                
                
                
                
                bw.write("\t\t\t\tfor (var i in blobs) {\n");
                bw.write("\t\t\t\t\tblobs[i].removePhysics(manager.getWorld());\n");
                bw.write("\t\t\t\t}\n");
                bw.write("\t\t\t},\n");
                bw.write("\n");
                //OnRefresh
                bw.write("\t\t\tonRefresh = function(time) {\n");
                bw.write("\t\t\t\tdraw();\n");
                bw.write("\t\t\t},\n");
                bw.write("\n");
                //OnAddBlob
                bw.write("\t\t\tonAddTuioBlob = function(blb) {\n");
                bw.write("\t\t\t\tmanager.addEvent(blb);\n");
                bw.write("\t\t\t},\n");
                bw.write("\n");
                //OnRemoveBlob
                bw.write("\t\t\tonRemoveTuioBlob = function(blb) {\n");
                bw.write("\t\t\t\tmanager.removeEvent(blb);\n");
                bw.write("\t\t\t},\n");
                bw.write("\n");
                //OnUpdateBlob
                bw.write("\t\t\tonUpdateTuioBlob = function(blb) {\n");
                bw.write("\t\t\t\tmanager.updateEvent(blb);\n");
                bw.write("\t\t\t};\n");
                bw.write("\n");
                bw.write("\t\t\tclient.on(\"connect\", onConnect);\n");
                bw.write("\t\t\tclient.on(\"addTuioBlob\", onAddTuioBlob);\n");
                bw.write("\t\t\tclient.on(\"updateTuioBlob\", onUpdateTuioBlob);\n");
                bw.write("\t\t\tclient.on(\"removeTuioBlob\", onRemoveTuioBlob);\n");
                bw.write("\t\t\tclient.on(\"refresh\", onRefresh);\n");
                bw.write("\t\t\tclient.connect();\n");
                bw.write("\t\t});\n");

                bw.write("\t\t</script>\n");
                bw.write("\t</body>\n");
                bw.write("</html>\n");
                bw.flush();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(bw != null) {
               bw.close(); 
            }
        } catch (IOException e) {
            System.out.println("Impossible de créer le fichier");
        }
    }//GEN-LAST:event_generateActionPerformed

    private void deleteShapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShapeButtonActionPerformed
        int index = shapeList.getSelectedIndex();
        shapeList.clearSelection();
        String name = (String) listModel.getElementAt(index);
        Shape shape = getShapeByName(name);
        if (shape != null) {
            shapes.remove(shape);
        }
        listModel.remove(index);
        deleteShapeButton.setEnabled(false);
    }//GEN-LAST:event_deleteShapeButtonActionPerformed

    private void addShapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addShapeButtonActionPerformed
        float radius = Float.parseFloat(radiusTextField.getText());
        float width = Float.parseFloat(widthTextField.getText());
        float height = Float.parseFloat(heightTextField.getText());
        float posX = Float.parseFloat(xPosTextField.getText());
        float posY = Float.parseFloat(yPosTextField.getText());
        String color = colorTextField.getText();
        boolean physics = shapePhysicsCheckBox.isSelected();
        float density = Float.parseFloat(densityTextField.getText());
        float restitution = Float.parseFloat(restitutionTextField.getText());
        boolean velocity = linearVelocityCheckBox.isSelected();
        int xVel = Integer.parseInt(xVelocityTextField.getText());
        int yVel = Integer.parseInt(yVelocityTextField.getText());
        boolean damping = linearDampingCheckBox.isSelected();
        float dampingCoeff = Float.parseFloat(dampingTextField.getText());
        String name = shapeNameTextField.getText();
        String context = (String)canvasComboListModel.getElementAt(shapeContextComboBox.getSelectedIndex());

        if (VerifierUniciteForme(name) && context.compareTo("") != 0){
            listModel.addElement(name);
            if (CircleRadioButton.isSelected()) {
                Circle circle = new Circle(radius, posX, posY, color, physics, density,restitution,velocity, xVel, yVel, damping,dampingCoeff, name, context);
                shapes.add(circle);
            } else if (RectangleRadioButton.isSelected()) {
                Rectangle rect = new Rectangle(width, height, posX, posY, color, physics, density, restitution, velocity, xVel, yVel, damping, dampingCoeff, name, context);
                shapes.add(rect);
            }
        }
    }//GEN-LAST:event_addShapeButtonActionPerformed

    private void shapeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_shapeListValueChanged
        if (shapeList.getSelectedIndex() >= 0) {
            String name = (String) listModel.getElementAt(shapeList.getSelectedIndex());
            Shape shape = getShapeByName(name);
            if (shape != null) {
                deleteShapeButton.setEnabled(true);
                if(shape instanceof Circle) {
                    CircleRadioButton.setSelected(true);
                    RectangleRadioButton.setSelected(false);
                    radiusTextField.setEnabled(true);
                    widthTextField.setEnabled(false);
                    heightTextField.setEnabled(false);
                    radiusTextField.setText(String.valueOf(((Circle)shape).getRadius()));
                } else {
                    RectangleRadioButton.setSelected(true);
                    CircleRadioButton.setSelected(false);
                    radiusTextField.setEnabled(false);
                    widthTextField.setEnabled(true);
                    heightTextField.setEnabled(true);
                    widthTextField.setText(String.valueOf(((Rectangle)shape).getWidth()));
                    heightTextField.setText(String.valueOf(((Rectangle)shape).getHeight()));
                }
                xPosTextField.setText(String.valueOf(shape.getPosX()));
                yPosTextField.setText(String.valueOf(shape.getPosY()));
                colorTextField.setText(shape.getColor());
                physicsCheckBox.setSelected(shape.isPhysics());
                densityTextField.setText(String.valueOf(shape.getDensity()));
                restitutionTextField.setText(String.valueOf(shape.getRestitution()));
                linearVelocityCheckBox.setSelected(shape.isVelocity());
                xVelocityTextField.setText(String.valueOf(shape.getxVelocity()));
                yVelocityTextField.setText(String.valueOf(shape.getyVelocity()));
                linearDampingCheckBox.setSelected(shape.isDamping());
                dampingTextField.setText(String.valueOf(shape.getDampingCoeff()));
                shapeContextComboBox.setSelectedIndex(canvasComboListModel.getIndexOf(shape.getContext()));
                if (physicsCheckBox.isSelected()) {
                    densityTextField.setEnabled(true);
                    restitutionTextField.setEnabled(true);
                    linearDampingCheckBox.setEnabled(true);
                    linearVelocityCheckBox.setEnabled(true);
                } else {
                    densityTextField.setEnabled(false);
                    restitutionTextField.setEnabled(false);
                    linearDampingCheckBox.setEnabled(false);
                    linearVelocityCheckBox.setEnabled(false);
                    linearDampingCheckBox.setSelected(false);
                    linearVelocityCheckBox.setSelected(false);
                    xVelocityTextField.setEnabled(false);
                    yVelocityTextField.setEnabled(false);
                    dampingTextField.setEnabled(false);
                }

                if (linearVelocityCheckBox.isSelected()) {
                    xVelocityTextField.setEnabled(true);
                    yVelocityTextField.setEnabled(true);
                } else {
                    xVelocityTextField.setEnabled(false);
                    yVelocityTextField.setEnabled(false);
                }

                if (linearDampingCheckBox.isSelected()) {
                    dampingTextField.setEnabled(true);
                } else {
                    dampingTextField.setEnabled(false);
                }
            } else {
                deleteShapeButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_shapeListValueChanged

    private void linearDampingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearDampingCheckBoxActionPerformed
        if (linearDampingCheckBox.isSelected()) {
            dampingTextField.setEnabled(true);
        } else {
            dampingTextField.setEnabled(false);
        }
    }//GEN-LAST:event_linearDampingCheckBoxActionPerformed

    private void linearVelocityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearVelocityCheckBoxActionPerformed
        if (linearVelocityCheckBox.isSelected()) {
            xVelocityTextField.setEnabled(true);
            yVelocityTextField.setEnabled(true);
        } else {
            xVelocityTextField.setEnabled(false);
            yVelocityTextField.setEnabled(false);
        }
    }//GEN-LAST:event_linearVelocityCheckBoxActionPerformed

    private void shapePhysicsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapePhysicsCheckBoxActionPerformed
        if (shapePhysicsCheckBox.isSelected()){
            physicsCheckBox.setSelected(true);
            gravityCheckBox.setEnabled(true);
            xGravityTextField.setEnabled(true);
            yGravityTextField.setEnabled(true);
            densityTextField.setEnabled(true);
            restitutionTextField.setEnabled(true);
            linearDampingCheckBox.setEnabled(true);
            linearVelocityCheckBox.setEnabled(true);
        } else {
            densityTextField.setEnabled(false);
            restitutionTextField.setEnabled(false);
            linearDampingCheckBox.setEnabled(false);
            linearVelocityCheckBox.setEnabled(false);
            linearDampingCheckBox.setSelected(false);
            linearVelocityCheckBox.setSelected(false);
            xVelocityTextField.setEnabled(false);
            yVelocityTextField.setEnabled(false);
            dampingTextField.setEnabled(false);
        }
    }//GEN-LAST:event_shapePhysicsCheckBoxActionPerformed

    private void CircleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleRadioButtonActionPerformed
        if (CircleRadioButton.isSelected()) {
            radiusTextField.setEnabled(true);
            widthTextField.setEnabled(false);
            heightTextField.setEnabled(false);
        } else {
            radiusTextField.setEnabled(false);
            widthTextField.setEnabled(true);
            heightTextField.setEnabled(true);
        }
    }//GEN-LAST:event_CircleRadioButtonActionPerformed

    private void RectangleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleRadioButtonActionPerformed
        if (RectangleRadioButton.isSelected()) {
            widthTextField.setEnabled(true);
            heightTextField.setEnabled(true);
            radiusTextField.setEnabled(false);
        } else {
            widthTextField.setEnabled(false);
            heightTextField.setEnabled(false);
            radiusTextField.setEnabled(true);
        }
    }//GEN-LAST:event_RectangleRadioButtonActionPerformed

    private void deletePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatternButtonActionPerformed
        if (patternList.getSelectedIndex() >= 0) {
            String name = (String)patternListModel.getElementAt(patternList.getSelectedIndex());
            Pattern p = getPatternByName(name);
            patternListModel.remove(patternList.getSelectedIndex());
            patterns.remove(p);
            deletePatternButton.setEnabled(false);
        }
    }//GEN-LAST:event_deletePatternButtonActionPerformed

    private void addPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatternButtonActionPerformed
        boolean sizeLimited = PatternSizeLimitedCheckBox.isSelected();
        boolean angleLimited = patternAngleLimitedCheckBox.isSelected();
        boolean xLimited = patternXLimitedCheckBox.isSelected();
        boolean yLimited = patternYLimitedCheckBox.isSelected();
        int size = Integer.parseInt(patternSizeLimitTextField.getText());
        int deltaSize = Integer.parseInt(patternSizeDeltaTextField.getText());
        int angle = Integer.parseInt(patternAngleLimitTextField.getText());
        int deltaAngle = Integer.parseInt(patternAngleDeltaTextField.getText());
        float xMin = Float.parseFloat(patternXMinTextField.getText());
        float xMax = Float.parseFloat(patternXMaxTextField.getText());
        float yMin = Float.parseFloat(patternYMinTextField.getText());
        float yMax = Float.parseFloat(patternYMaxTextField.getText());
        boolean gesture = patternGestureCheckBox.isSelected();
        String name = patternNameTextField.getText();
        boolean shown = patternShowCheckBox.isSelected();
        String color = patternColorTextField.getText();
        String context = (String) canvasListModel.getElementAt(patternCanvasComboBox.getSelectedIndex());
        boolean physics = patternPhysicsCheckBox.isSelected();

        if (name.compareTo("") != 0 && VerifierUnicitePattern(name)) {
            Pattern p = new Pattern(sizeLimited,angleLimited,xLimited,yLimited,size,deltaSize,angle,deltaAngle,xMin,xMax,yMin, yMax,gesture,name,shown,color,context,physics);
            patterns.add(p);
            patternListModel.addElement(name);
        }
    }//GEN-LAST:event_addPatternButtonActionPerformed

    private void patternListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_patternListValueChanged
        if (patternList.getSelectedIndex() >= 0) {
            deletePatternButton.setEnabled(true);
            Pattern p = getPatternByName((String)patternListModel.getElementAt(patternList.getSelectedIndex()));
            patternNameTextField.setText(p.getName());
            PatternSizeLimitedCheckBox.setSelected(p.isSizeLimited());
            patternAngleLimitedCheckBox.setSelected(p.isAngleLimited());
            patternXLimitedCheckBox.setSelected(p.isxLimited());
            patternYLimitedCheckBox.setSelected(p.isyLimited());
            patternSizeLimitTextField.setText(String.valueOf(p.getSize()));
            patternSizeDeltaTextField.setText(String.valueOf(p.getDeltaSize()));
            patternAngleLimitTextField.setText(String.valueOf(p.getAngle()));
            patternAngleDeltaTextField.setText(String.valueOf(p.getDeltaAngle()));
            patternXMinTextField.setText(String.valueOf(p.getxMin()));
            patternXMaxTextField.setText(String.valueOf(p.getxMax()));
            patternYMinTextField.setText(String.valueOf(p.getyMin()));
            patternYMaxTextField.setText(String.valueOf(p.getyMax()));
            if (PatternSizeLimitedCheckBox.isSelected()) {
                patternSizeDeltaTextField.setEnabled(true);
                patternSizeLimitTextField.setEnabled(true);
            } else {
                patternSizeDeltaTextField.setEnabled(false);
                patternSizeLimitTextField.setEnabled(false);
            }
            if (patternAngleLimitedCheckBox.isSelected()) {
                patternAngleDeltaTextField.setEnabled(true);
                patternAngleLimitTextField.setEnabled(true);
            } else {
                patternAngleDeltaTextField.setEnabled(false);
                patternAngleLimitTextField.setEnabled(false);
            }
            if (patternXLimitedCheckBox.isSelected()) {
                patternXMaxTextField.setEnabled(true);
                patternXMinTextField.setEnabled(true);
            } else {
                patternXMinTextField.setEnabled(false);
                patternXMaxTextField.setEnabled(false);
            }
            if (patternYLimitedCheckBox.isSelected()) {
                patternYMinTextField.setEnabled(true);
                patternYMaxTextField.setEnabled(true);
            } else {
                patternYMinTextField.setEnabled(false);
                patternYMaxTextField.setEnabled(false);
            }
            patternGestureCheckBox.setSelected(p.isGesture());
        }
    }//GEN-LAST:event_patternListValueChanged

    private void patternXMaxTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternXMaxTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patternXMaxTextFieldActionPerformed

    private void patternPhysicsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternPhysicsCheckBoxActionPerformed
        if (patternPhysicsCheckBox.isSelected()) {
            physicsCheckBox.setSelected(true);
            gravityCheckBox.setEnabled(true);
            xGravityTextField.setEnabled(true);
            yGravityTextField.setEnabled(true);
        }
    }//GEN-LAST:event_patternPhysicsCheckBoxActionPerformed

    private void patternYLimitedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternYLimitedCheckBoxActionPerformed
        if (patternYLimitedCheckBox.isSelected()) {
            patternYMinTextField.setEnabled(true);
            patternYMaxTextField.setEnabled(true);
        } else {
            patternYMinTextField.setEnabled(false);
            patternYMaxTextField.setEnabled(false);
        }
    }//GEN-LAST:event_patternYLimitedCheckBoxActionPerformed

    private void patternXLimitedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternXLimitedCheckBoxActionPerformed
        if (patternXLimitedCheckBox.isSelected()) {
            patternXMinTextField.setEnabled(true);
            patternXMaxTextField.setEnabled(true);
        } else {
            patternXMinTextField.setEnabled(false);
            patternXMaxTextField.setEnabled(false);
        }
    }//GEN-LAST:event_patternXLimitedCheckBoxActionPerformed

    private void patternAngleLimitedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternAngleLimitedCheckBoxActionPerformed
        if (patternAngleLimitedCheckBox.isSelected()) {
            patternAngleLimitTextField.setEnabled(true);
            patternAngleDeltaTextField.setEnabled(true);
        } else {
            patternAngleLimitTextField.setEnabled(false);
            patternAngleDeltaTextField.setEnabled(false);
        }
    }//GEN-LAST:event_patternAngleLimitedCheckBoxActionPerformed

    private void PatternSizeLimitedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatternSizeLimitedCheckBoxActionPerformed
        if (PatternSizeLimitedCheckBox.isSelected()) {
            patternSizeLimitTextField.setEnabled(true);
            patternSizeDeltaTextField.setEnabled(true);
        } else {
            patternSizeLimitTextField.setEnabled(false);
            patternSizeDeltaTextField.setEnabled(false);
        }
    }//GEN-LAST:event_PatternSizeLimitedCheckBoxActionPerformed

    private void deleteCanvasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCanvasButtonActionPerformed
        if (canvasList.getSelectedIndex() >= 0) {
            String name = (String) canvasListModel.getElementAt(canvasList.getSelectedIndex());
            Canvas c = getCanvasByName(name);
            canvas.remove(c);
            canvasComboListModel.removeElementAt(canvasList.getSelectedIndex());
            canvasListModel.remove(canvasList.getSelectedIndex());
            for (Shape s : shapes) {
                if (s.getContext().compareTo(name) == 0) {
                    listModel.removeElement(s.getName());
                    shapes.remove(s);
                }
            }

            deleteCanvasButton.setEnabled(false);
        }
    }//GEN-LAST:event_deleteCanvasButtonActionPerformed

    private void addCanvasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCanvasButtonActionPerformed
        String name = CanvasNameTextField.getText();
        float xPos = Float.parseFloat(canvasXPosTextField.getText());
        float yPos = Float.parseFloat(canvasYPosTextField.getText());
        int zPos = Integer.parseInt(canvasZPosTextField.getText());
        float width = Float.parseFloat(canvasWidthTextField.getText());
        float height = Float.parseFloat(canvasHeightTextField.getText());
        String color = canvasColorTextField.getText();

        if (name.compareTo("") != 0 && VerifierUniciteCanvas(name)) {
            canvasListModel.addElement(name);
            canvasComboListModel.addElement(name);
            Canvas c = new Canvas(name, xPos, yPos, zPos, width, height, color);
            canvas.add(c);
        }
    }//GEN-LAST:event_addCanvasButtonActionPerformed

    private void canvasColorTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canvasColorTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_canvasColorTextFieldActionPerformed

    private void canvasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_canvasListValueChanged
        if (canvasList.getSelectedIndex() >= 0) {
            deleteCanvasButton.setEnabled(true);
            Canvas c = getCanvasByName((String)canvasListModel.getElementAt(canvasList.getSelectedIndex()));
            CanvasNameTextField.setText(c.getName());
            canvasXPosTextField.setText(String.valueOf(c.getxPos()));
            canvasYPosTextField.setText(String.valueOf(c.getyPos()));
            canvasZPosTextField.setText(String.valueOf(c.getzPos()));
            canvasWidthTextField.setText(String.valueOf(c.getWidth()));
            canvasHeightTextField.setText(String.valueOf(c.getHeight()));
        }
    }//GEN-LAST:event_canvasListValueChanged

    private void canvasYPosTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canvasYPosTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_canvasYPosTextFieldActionPerformed

    private void canvasXPosTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canvasXPosTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_canvasXPosTextFieldActionPerformed

    private void xGravityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xGravityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xGravityTextFieldActionPerformed

    private void gravityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gravityCheckBoxActionPerformed
        if (gravityCheckBox.isSelected()) {
            physicsCheckBox.setSelected(true);
            xGravityTextField.setEnabled(true);
            yGravityTextField.setEnabled(true);
        } else {
            xGravityTextField.setEnabled(false);
            yGravityTextField.setEnabled(false);
        }
    }//GEN-LAST:event_gravityCheckBoxActionPerformed

    private void physicsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_physicsCheckBoxActionPerformed
        if (physicsCheckBox.isSelected()) {
            gravityCheckBox.setEnabled(true);
        } else {
            gravityCheckBox.setEnabled(false);
            gravityCheckBox.setSelected(false);
            xGravityTextField.setEnabled(false);
            yGravityTextField.setEnabled(false);
        }
    }//GEN-LAST:event_physicsCheckBoxActionPerformed

    private void dragCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dragCheckBoxActionPerformed

    private void pinchCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinchCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pinchCheckBoxActionPerformed

    private void netCircleScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netCircleScaleCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netCircleScaleCheckBoxActionPerformed

    private void netRecepCircleScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRecepCircleScaleCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netRecepCircleScaleCheckBoxActionPerformed

    private void networkBlobCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkBlobCheckBoxActionPerformed
        if (networkBlobCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netBlobIdCheckBox.setEnabled(true);
            netBlobXRelPosCheckBox.setEnabled(true);
            netBlobYRelPosCheckBox.setEnabled(true);
            netBlobXSpeedCheckBox.setEnabled(true);
            netBlobYSpeedCheckBox.setEnabled(true);
            netBlobMotionAccelCheckBox.setEnabled(true);
            netBlobRelWidthCheckBox.setEnabled(true);
            netBlobRelHeightCheckBox.setEnabled(true);
            netBlobAngleCheckBox.setEnabled(true);
            netBlobAngleSpeedCheckBox.setEnabled(true);
            netBlobAngleAccelCheckBox.setEnabled(true);
            netBlobRealTimeSendingCheckBox.setEnabled(true);
            if (!netBlobRealTimeSendingCheckBox.isSelected()) {
                netBlobSendingFreqTextField.setEnabled(true);
            }
        } else {
            netBlobIdCheckBox.setEnabled(false);
            netBlobXRelPosCheckBox.setEnabled(false);
            netBlobYRelPosCheckBox.setEnabled(false);
            netBlobXSpeedCheckBox.setEnabled(false);
            netBlobYSpeedCheckBox.setEnabled(false);
            netBlobMotionAccelCheckBox.setEnabled(false);
            netBlobRelWidthCheckBox.setEnabled(false);
            netBlobRelHeightCheckBox.setEnabled(false);
            netBlobAngleCheckBox.setEnabled(false);
            netBlobAngleSpeedCheckBox.setEnabled(false);
            netBlobAngleAccelCheckBox.setEnabled(false);
            netBlobSendingFreqTextField.setEnabled(false);
            netBlobRealTimeSendingCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_networkBlobCheckBoxActionPerformed

    private void networkCircleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkCircleCheckBoxActionPerformed
        if (networkCircleCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netCircleXRelPositionCheckBox.setEnabled(true);
            netCircleYRelPositionCheckBox.setEnabled(true);
            netCircleYSpeedCheckBox.setEnabled(true);
            netCircleXSpeedCheckBox.setEnabled(true);
            netCircleRelRadiusCheckBox.setEnabled(true);
            netCircleScaleCheckBox.setEnabled(true);
            netCircleColorCheckBox.setEnabled(true);
        } else {
            netCircleXRelPositionCheckBox.setEnabled(false);
            netCircleYRelPositionCheckBox.setEnabled(false);
            netCircleYSpeedCheckBox.setEnabled(false);
            netCircleXSpeedCheckBox.setEnabled(false);
            netCircleRelRadiusCheckBox.setEnabled(false);
            netCircleScaleCheckBox.setEnabled(false);
            netCircleColorCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_networkCircleCheckBoxActionPerformed

    private void networkRectangleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkRectangleCheckBoxActionPerformed
        if (networkRectangleCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netRectangleXRelPositionCheckBox.setEnabled(true);
            netRectangleYRelPositionCheckBox.setEnabled(true);
            netRectangleXSpeedCheckBox.setEnabled(true);
            netRectangleYSpeedCheckBox.setEnabled(true);
            netRectangleRelWidthCheckBox.setEnabled(true);
            netRectangleRelHeightCheckBox.setEnabled(true);
            netRectangleAngleCheckBox.setEnabled(true);
            netRectangleScaleCheckBox.setEnabled(true);
            netRectangleColorCheckBox.setEnabled(true);
        } else {
            netRectangleXRelPositionCheckBox.setEnabled(false);
            netRectangleYRelPositionCheckBox.setEnabled(false);
            netRectangleXSpeedCheckBox.setEnabled(false);
            netRectangleYSpeedCheckBox.setEnabled(false);
            netRectangleRelWidthCheckBox.setEnabled(false);
            netRectangleRelHeightCheckBox.setEnabled(false);
            netRectangleAngleCheckBox.setEnabled(false);
            netRectangleScaleCheckBox.setEnabled(false);
            netRectangleColorCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_networkRectangleCheckBoxActionPerformed

    private void netRecepBlobCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRecepBlobCheckBoxActionPerformed
        if (netRecepBlobCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netRecepBlobIdCheckBox.setEnabled(true);
            netRecepBlobXRelPosCheckBox.setEnabled(true);
            netRecepBlobYRelPosCheckBox.setEnabled(true);
            netRecepBlobXSpeedCheckBox.setEnabled(true);
            netRecepBlobYSpeedCheckBox.setEnabled(true);
            netRecepBlobMotionAccelCheckBox.setEnabled(true);
            netRecepBlobRelWidthCheckBox.setEnabled(true);
            netRecepBlobRelHeightCheckBox.setEnabled(true);
            netRecepBlobAngleCheckBox.setEnabled(true);
            netRecepBlobAngleSpeedCheckBox.setEnabled(true);
            netRecepBlobAngleAccelCheckBox.setEnabled(true);
        } else {
            netRecepBlobIdCheckBox.setEnabled(false);
            netRecepBlobXRelPosCheckBox.setEnabled(false);
            netRecepBlobYRelPosCheckBox.setEnabled(false);
            netRecepBlobXSpeedCheckBox.setEnabled(false);
            netRecepBlobYSpeedCheckBox.setEnabled(false);
            netRecepBlobMotionAccelCheckBox.setEnabled(false);
            netRecepBlobRelWidthCheckBox.setEnabled(false);
            netRecepBlobRelHeightCheckBox.setEnabled(false);
            netRecepBlobAngleCheckBox.setEnabled(false);
            netRecepBlobAngleSpeedCheckBox.setEnabled(false);
            netRecepBlobAngleAccelCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_netRecepBlobCheckBoxActionPerformed

    private void netRecepCircleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRecepCircleCheckBoxActionPerformed
        if (netRecepCircleCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netRecepCircleXRelPositionCheckBox.setEnabled(true);
            netRecepCircleYRelPositionCheckBox.setEnabled(true);
            netRecepCircleXSpeedCheckBox.setEnabled(true);
            netRecepCircleYSpeedCheckBox.setEnabled(true);
            netRecepCircleRelRadiusCheckBox.setEnabled(true);
            netRecepCircleScaleCheckBox.setEnabled(true);
            netRecepCircleColorCheckBox.setEnabled(true);
        } else {
            netRecepCircleXRelPositionCheckBox.setEnabled(false);
            netRecepCircleYRelPositionCheckBox.setEnabled(false);
            netRecepCircleXSpeedCheckBox.setEnabled(false);
            netRecepCircleYSpeedCheckBox.setEnabled(false);
            netRecepCircleRelRadiusCheckBox.setEnabled(false);
            netRecepCircleScaleCheckBox.setEnabled(false);
            netRecepCircleColorCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_netRecepCircleCheckBoxActionPerformed

    private void netRecepRectangleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRecepRectangleCheckBoxActionPerformed
        if (netRecepRectangleCheckBox.isSelected()) {
            networkCheckBox.setSelected(true);
            netRecepRectangleXRelPositionCheckBox.setEnabled(true);
            netRecepRectangleYRelPositionCheckBox.setEnabled(true);
            netRecepRectangleXSpeedCheckBox.setEnabled(true);
            netRecepRectangleYSpeedCheckBox.setEnabled(true);
            netRecepRectangleRelWidthCheckBox.setEnabled(true);
            netRecepRectangleRelHeightCheckBox.setEnabled(true);
            netRecepRectangleAngleCheckBox.setEnabled(true);
            netRecepRectangleScaleCheckBox.setEnabled(true);
            netRecepRectangleColorCheckBox.setEnabled(true);
        } else {
            netRecepRectangleXRelPositionCheckBox.setEnabled(false);
            netRecepRectangleYRelPositionCheckBox.setEnabled(false);
            netRecepRectangleXSpeedCheckBox.setEnabled(false);
            netRecepRectangleYSpeedCheckBox.setEnabled(false);
            netRecepRectangleRelWidthCheckBox.setEnabled(false);
            netRecepRectangleRelHeightCheckBox.setEnabled(false);
            netRecepRectangleAngleCheckBox.setEnabled(false);
            netRecepRectangleScaleCheckBox.setEnabled(false);
            netRecepRectangleColorCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_netRecepRectangleCheckBoxActionPerformed

    private void netRecepBlobRelWidthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRecepBlobRelWidthCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netRecepBlobRelWidthCheckBoxActionPerformed

    private void netBlobRealTimeSendingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netBlobRealTimeSendingCheckBoxActionPerformed
        if (netBlobRealTimeSendingCheckBox.isSelected()) {
            netBlobSendingFreqTextField.setEnabled(false);
        } else {
            netBlobSendingFreqTextField.setEnabled(true);
        }
    }//GEN-LAST:event_netBlobRealTimeSendingCheckBoxActionPerformed

    private void serverPortTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortTextFieldActionPerformed

    private void networkCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkCheckBoxActionPerformed
        if (networkCheckBox.isSelected()) {
            serverIPTextField.setEnabled(true);
            serverPortTextField.setEnabled(true);
        } else {
            serverIPTextField.setEnabled(false);
            serverPortTextField.setEnabled(false);
        }
    }//GEN-LAST:event_networkCheckBoxActionPerformed

    private void netRectangleXSpeedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netRectangleXSpeedCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netRectangleXSpeedCheckBoxActionPerformed

    private Shape getShapeByName(String name) {
        for (Shape s : shapes) {
            if (s.getName().compareTo(name) == 0) {
                return s;
            }
        }
        return null;
    }
    
    private Canvas getCanvasByName(String name) {
        for (Canvas c : canvas) {
            if (c.getName().compareTo(name) == 0) {
                return c;
            }
        }
        return null;
    }
    
    private Pattern getPatternByName(String name) {
        for (Pattern p : patterns) {
            if (p.getName().compareTo(name) == 0) {
                return p;
            }
        }
        return null;
    }
    
    private boolean VerifierUniciteForme(String name) {
        for (Shape s : shapes) {
            if (s.getName().compareTo(name) == 0) {
                return false;
            }
        }
        return true;
    }
    
    private boolean VerifierUniciteCanvas(String name) {
        for (Canvas c : canvas) {
            if (c.getName().compareTo(name) == 0) {
                return false;
            }
        }
        return true;
    }
    
    private boolean VerifierUnicitePattern(String name) {
        for (Pattern p : patterns) {
            if (p.getName().compareTo(name) == 0) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FileGenerator().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(FileGenerator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CanvasNameTextField;
    private javax.swing.JRadioButton CircleRadioButton;
    private javax.swing.JCheckBox PatternSizeLimitedCheckBox;
    private javax.swing.JRadioButton RectangleRadioButton;
    private javax.swing.JButton addCanvasButton;
    private javax.swing.JButton addPatternButton;
    private javax.swing.JButton addShapeButton;
    private javax.swing.JLabel canvasColorLabel;
    private javax.swing.JTextField canvasColorTextField;
    private javax.swing.JLabel canvasHeightLabel;
    private javax.swing.JTextField canvasHeightTextField;
    private javax.swing.JList canvasList;
    private javax.swing.JLabel canvasNameLabel;
    private javax.swing.JLabel canvasWidthLabel;
    private javax.swing.JTextField canvasWidthTextField;
    private javax.swing.JLabel canvasXPosLabel;
    private javax.swing.JTextField canvasXPosTextField;
    private javax.swing.JLabel canvasYPosLabel;
    private javax.swing.JTextField canvasYPosTextField;
    private javax.swing.JLabel canvasZPosLabel;
    private javax.swing.JTextField canvasZPosTextField;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JTextField colorTextField;
    private javax.swing.JLabel dampingLabel;
    private javax.swing.JTextField dampingTextField;
    private javax.swing.JButton deleteCanvasButton;
    private javax.swing.JButton deletePatternButton;
    private javax.swing.JButton deleteShapeButton;
    private javax.swing.JLabel densityLabel;
    private javax.swing.JTextField densityTextField;
    private javax.swing.JCheckBox dragCheckBox;
    private javax.swing.JTextField fileName;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JButton generate;
    private javax.swing.JLabel gestureLabel;
    private javax.swing.JCheckBox gravityCheckBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JTextField heightTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JCheckBox linearDampingCheckBox;
    private javax.swing.JCheckBox linearVelocityCheckBox;
    private javax.swing.JCheckBox netBlobAngleAccelCheckBox;
    private javax.swing.JCheckBox netBlobAngleCheckBox;
    private javax.swing.JCheckBox netBlobAngleSpeedCheckBox;
    private javax.swing.JCheckBox netBlobIdCheckBox;
    private javax.swing.JCheckBox netBlobMotionAccelCheckBox;
    private javax.swing.JCheckBox netBlobRealTimeSendingCheckBox;
    private javax.swing.JCheckBox netBlobRelHeightCheckBox;
    private javax.swing.JCheckBox netBlobRelWidthCheckBox;
    private javax.swing.JLabel netBlobSendingFreqLabel;
    private javax.swing.JTextField netBlobSendingFreqTextField;
    private javax.swing.JCheckBox netBlobXRelPosCheckBox;
    private javax.swing.JCheckBox netBlobXSpeedCheckBox;
    private javax.swing.JCheckBox netBlobYRelPosCheckBox;
    private javax.swing.JCheckBox netBlobYSpeedCheckBox;
    private javax.swing.JCheckBox netCircleColorCheckBox;
    private javax.swing.JCheckBox netCircleRelRadiusCheckBox;
    private javax.swing.JCheckBox netCircleScaleCheckBox;
    private javax.swing.JCheckBox netCircleXRelPositionCheckBox;
    private javax.swing.JCheckBox netCircleXSpeedCheckBox;
    private javax.swing.JCheckBox netCircleYRelPositionCheckBox;
    private javax.swing.JCheckBox netCircleYSpeedCheckBox;
    private javax.swing.JCheckBox netRecepBlobAngleAccelCheckBox;
    private javax.swing.JCheckBox netRecepBlobAngleCheckBox;
    private javax.swing.JCheckBox netRecepBlobAngleSpeedCheckBox;
    private javax.swing.JCheckBox netRecepBlobCheckBox;
    private javax.swing.JCheckBox netRecepBlobIdCheckBox;
    private javax.swing.JCheckBox netRecepBlobMotionAccelCheckBox;
    private javax.swing.JCheckBox netRecepBlobRelHeightCheckBox;
    private javax.swing.JCheckBox netRecepBlobRelWidthCheckBox;
    private javax.swing.JCheckBox netRecepBlobXRelPosCheckBox;
    private javax.swing.JCheckBox netRecepBlobXSpeedCheckBox;
    private javax.swing.JCheckBox netRecepBlobYRelPosCheckBox;
    private javax.swing.JCheckBox netRecepBlobYSpeedCheckBox;
    private javax.swing.JCheckBox netRecepCircleCheckBox;
    private javax.swing.JCheckBox netRecepCircleColorCheckBox;
    private javax.swing.JCheckBox netRecepCircleRelRadiusCheckBox;
    private javax.swing.JCheckBox netRecepCircleScaleCheckBox;
    private javax.swing.JCheckBox netRecepCircleXRelPositionCheckBox;
    private javax.swing.JCheckBox netRecepCircleXSpeedCheckBox;
    private javax.swing.JCheckBox netRecepCircleYRelPositionCheckBox;
    private javax.swing.JCheckBox netRecepCircleYSpeedCheckBox;
    private javax.swing.JCheckBox netRecepRectangleAngleCheckBox;
    private javax.swing.JCheckBox netRecepRectangleCheckBox;
    private javax.swing.JCheckBox netRecepRectangleColorCheckBox;
    private javax.swing.JCheckBox netRecepRectangleRelHeightCheckBox;
    private javax.swing.JCheckBox netRecepRectangleRelWidthCheckBox;
    private javax.swing.JCheckBox netRecepRectangleScaleCheckBox;
    private javax.swing.JCheckBox netRecepRectangleXRelPositionCheckBox;
    private javax.swing.JCheckBox netRecepRectangleXSpeedCheckBox;
    private javax.swing.JCheckBox netRecepRectangleYRelPositionCheckBox;
    private javax.swing.JCheckBox netRecepRectangleYSpeedCheckBox;
    private javax.swing.JCheckBox netRectangleAngleCheckBox;
    private javax.swing.JCheckBox netRectangleColorCheckBox;
    private javax.swing.JCheckBox netRectangleRelHeightCheckBox;
    private javax.swing.JCheckBox netRectangleRelWidthCheckBox;
    private javax.swing.JCheckBox netRectangleScaleCheckBox;
    private javax.swing.JCheckBox netRectangleXRelPositionCheckBox;
    private javax.swing.JCheckBox netRectangleXSpeedCheckBox;
    private javax.swing.JCheckBox netRectangleYRelPositionCheckBox;
    private javax.swing.JCheckBox netRectangleYSpeedCheckBox;
    private javax.swing.JCheckBox networkBlobCheckBox;
    private javax.swing.JCheckBox networkCheckBox;
    private javax.swing.JCheckBox networkCircleCheckBox;
    private javax.swing.JLabel networkLabel;
    private javax.swing.JCheckBox networkRectangleCheckBox;
    private javax.swing.JLabel patternAngleDeltaLabel;
    private javax.swing.JTextField patternAngleDeltaTextField;
    private javax.swing.JLabel patternAngleLimitLabel;
    private javax.swing.JTextField patternAngleLimitTextField;
    private javax.swing.JCheckBox patternAngleLimitedCheckBox;
    private javax.swing.JComboBox patternCanvasComboBox;
    private javax.swing.JLabel patternColorLabel;
    private javax.swing.JTextField patternColorTextField;
    private javax.swing.JLabel patternContextLabel;
    private javax.swing.JCheckBox patternGestureCheckBox;
    private javax.swing.JList patternList;
    private javax.swing.JLabel patternNameLabel;
    private javax.swing.JTextField patternNameTextField;
    private javax.swing.JCheckBox patternPhysicsCheckBox;
    private javax.swing.JCheckBox patternShowCheckBox;
    private javax.swing.JLabel patternSizeDeltaLabel;
    private javax.swing.JTextField patternSizeDeltaTextField;
    private javax.swing.JLabel patternSizeLimitLabel;
    private javax.swing.JTextField patternSizeLimitTextField;
    private javax.swing.JCheckBox patternXLimitedCheckBox;
    private javax.swing.JLabel patternXMaxLabel;
    private javax.swing.JTextField patternXMaxTextField;
    private javax.swing.JLabel patternXMinLabel;
    private javax.swing.JTextField patternXMinTextField;
    private javax.swing.JCheckBox patternYLimitedCheckBox;
    private javax.swing.JLabel patternYMaxLabel;
    private javax.swing.JTextField patternYMaxTextField;
    private javax.swing.JLabel patternYMinLabel;
    private javax.swing.JTextField patternYMinTextField;
    private javax.swing.JCheckBox physicsCheckBox;
    private javax.swing.JLabel physicsLabel;
    private javax.swing.JCheckBox pinchCheckBox;
    private javax.swing.JLabel radiusLabel;
    private javax.swing.JTextField radiusTextField;
    private javax.swing.JLabel restitutionLabel;
    private javax.swing.JTextField restitutionTextField;
    private javax.swing.JCheckBox rotateCheckBox;
    private javax.swing.JLabel serverIPLabel;
    private javax.swing.JTextField serverIPTextField;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTextField;
    private javax.swing.JComboBox shapeContextComboBox;
    private javax.swing.JLabel shapeContextLabel;
    private javax.swing.JList shapeList;
    private javax.swing.JLabel shapeNameLabel;
    private javax.swing.JTextField shapeNameTextField;
    private javax.swing.JCheckBox shapePhysicsCheckBox;
    private javax.swing.ButtonGroup shapebuttonGroup;
    private javax.swing.JCheckBox tapCheckBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JTextField widthTextField;
    private javax.swing.JLabel xGravityLabel;
    private javax.swing.JTextField xGravityTextField;
    private javax.swing.JLabel xPosLabel;
    private javax.swing.JTextField xPosTextField;
    private javax.swing.JLabel xVelocityLabel;
    private javax.swing.JTextField xVelocityTextField;
    private javax.swing.JLabel yGravityLabel;
    private javax.swing.JTextField yGravityTextField;
    private javax.swing.JLabel yPosLabel;
    private javax.swing.JTextField yPosTextField;
    private javax.swing.JLabel yVelocityLabel;
    private javax.swing.JTextField yVelocityTextField;
    // End of variables declaration//GEN-END:variables
}
